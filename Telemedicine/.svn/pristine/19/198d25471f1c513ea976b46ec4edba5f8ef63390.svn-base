package com.nsdl.ndhm.transfer.service.impl;

import com.google.gson.Gson;
import com.nsdl.ndhm.dto.RespDTO;
import com.nsdl.ndhm.repository.CareContextRepository;
import com.nsdl.ndhm.transfer.dto.*;
import com.nsdl.ndhm.transfer.service.DataTranferRequestService;
import com.nsdl.ndhm.utility.CommonHeadersUtil;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.net.URI;
import java.text.SimpleDateFormat;
import java.util.*;

import static com.nsdl.ndhm.utility.FhirEncryptDecryptUtil.*;

@Service
public class DataTranferRequestServiceImpl implements DataTranferRequestService {

	private static final Logger logger = LoggerFactory.getLogger(DataTranferRequestServiceImpl.class);

	@Autowired
	CareContextRepository careContextRepository;

	@Autowired
	CommonHeadersUtil commonHeadersUtil;

	@Autowired
	private RestTemplate restTemplate;

	@Value("${ndhm.onRequest}")
	String onRequest;

	private static final String DATE_FORMAT = "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'";

	private OnRequestRespDTO prepareRequestDummyData(DataRequestDTO dataRequestDTO) {
		SimpleDateFormat format1 = new SimpleDateFormat(DATE_FORMAT, Locale.US);
		format1.setTimeZone(TimeZone.getTimeZone("UTC"));
		return OnRequestRespDTO.builder().requestId(UUID.randomUUID().toString()).timestamp(format1.format(new Date()))
				.resp(RespDTO.builder().requestId(dataRequestDTO.getRequestId()).build()).hiRequest(HiRequestRespDTo
						.builder().sessionStatus("ACKNOWLEDGED").transactionId(UUID.randomUUID().toString()).build())
				.build();
	}

	/*
	 * for demo request call
	 */
	@Override
	public ResponseEntity<String> requestDemo(DataRequestDTO dataRequestDTO) {
		logger.info("Request Receives for Request Starts");

		String url = onRequest;
		ResponseEntity<String> result = null;
		URI uri;

		try {
			uri = new URI(url);
			String encryptedString = new Gson().toJson(prepareRequestDummyData(dataRequestDTO));
			HttpEntity<String> requestEntity = new HttpEntity<>(encryptedString,
					commonHeadersUtil.getHeadersWithXCmIdFromServer());

			result = restTemplate.exchange(uri, HttpMethod.POST, requestEntity, String.class);
			logger.info("requestEntity {}", requestEntity);
			logger.info("result {}", result);
		} catch (Exception e) {
			logger.info("Error in On-Request {} ", e);
		}

		if (result.getStatusCode().is2xxSuccessful()) {
			try {
				uri = new URI(dataRequestDTO.getHiRequest().getDataPushUrl());
				String encryptedString = new Gson().toJson(prepareDataTransferDTO(dataRequestDTO));
				HttpEntity<String> requestEntity = new HttpEntity<>(encryptedString,
						commonHeadersUtil.getHeadersWithRefreshTokenFromServer());
				result = restTemplate.exchange(uri, HttpMethod.POST, requestEntity, String.class);
			} catch (Exception e) {
				logger.error("Error is in DataTransfer {}", e.getMessage());
			}
		}
		return result;
	}

	private DataTransferDTO prepareDataTransferDTO(DataRequestDTO dataRequestDTO) throws Exception {
		KeyMaterialDTO receiverKeyMaterial = dataRequestDTO.getHiRequest().getKeyMaterial();
		senderPublicPrivateKeygen();

		EntryDTO entryDTO = EntryDTO.builder()
				.content(encrypt(receiverKeyMaterial.getNonce(),receiverKeyMaterial.getDhPublicKey().getKeyValue()))
				.media("application/fhir+json").checksum("string")
				.careContextReference("PAT_10_101").build();

		KeyMaterialDTO keyMaterialDTO = KeyMaterialDTO.builder().cryptoAlg("ECDH").curve("Curve25519")
				                        .dhPublicKey(DhPublicKeyDTO.builder().expiry("2022-02-21T12:00:50.810Z")
												.parameters("Curve25519/32byte random key")
												.keyValue(getSenderPublicKey()).build())
				                        .nonce(senderNonce()).build();

		return DataTransferDTO.builder()
				.pageCount(1)
				.pageNumber(1)
				.transactionId(dataRequestDTO.getTransactionId())
				.entries(Arrays.asList(entryDTO))
                .keyMaterial(keyMaterialDTO)
				.build();
	}
}
