package com.nsdl.ndhm.transfer.service.impl;

import com.google.gson.Gson;
import com.nsdl.ndhm.dto.RespDTO;
import com.nsdl.ndhm.repository.CareContextRepository;
import com.nsdl.ndhm.repository.HipRequestRepository;
import com.nsdl.ndhm.transfer.dto.*;
import com.nsdl.ndhm.transfer.entity.HipRequestEntity;
import com.nsdl.ndhm.transfer.service.DataTranferRequestService;
import com.nsdl.ndhm.utility.CommonHeadersUtil;
import com.nsdl.ndhm.utility.fhir.encrypt.Encryption;
import com.nsdl.ndhm.utility.fhir.encrypt.EncryptionRequest;
import com.nsdl.ndhm.utility.fhir.encrypt.EncryptionResponse;
import com.nsdl.ndhm.utility.fhir.keys.KeyMaterial;
import com.nsdl.ndhm.utility.fhir.keys.KeysGenerator;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.net.URI;
import java.text.SimpleDateFormat;
import java.util.*;

import static com.nsdl.ndhm.utility.FhirEncryptDecryptUtil.*;

@Service
public class DataTranferRequestServiceImpl implements DataTranferRequestService {

	private static final Logger logger = LoggerFactory.getLogger(DataTranferRequestServiceImpl.class);

	@Autowired
	CareContextRepository careContextRepository;

	@Autowired
	HipRequestRepository hipRequestRepository;

	@Autowired
	Encryption encryption;

	@Autowired
	KeysGenerator keysGenerator;

	@Autowired
	CommonHeadersUtil commonHeadersUtil;

	@Autowired
	private RestTemplate restTemplate;

	@Value("${ndhm.onRequest}")
	String onRequest;
	
	@Value("${ndhm.transfer.onNotify}")
	String transferNotify;

	private static final String DATE_FORMAT = "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'";

	private OnRequestRespDTO prepareRequestDummyData(DataRequestDTO dataRequestDTO) {
		SimpleDateFormat format1 = new SimpleDateFormat(DATE_FORMAT, Locale.US);
		format1.setTimeZone(TimeZone.getTimeZone("UTC"));
		return OnRequestRespDTO.builder()
				.requestId(UUID.randomUUID().toString()).timestamp(format1.format(new Date()))
				.hiRequest(HiRequestRespDTo.builder().transactionId(dataRequestDTO.getTransactionId())
				.sessionStatus("ACKNOWLEDGED").build()).resp(RespDTO.builder()
						.requestId(dataRequestDTO.getRequestId()).build()).build();
	}

	/*
	 * for demo request call
	 */
	@Override
	public ResponseEntity<String> requestDemo(DataRequestDTO dataRequestDTO) {
		logger.info("Request Receives for Request Starts");

		String url = onRequest;
		ResponseEntity<String> result = null;
		URI uri;

		try {
			uri = new URI(url);
			String encryptedString = new Gson().toJson(prepareRequestDummyData(dataRequestDTO));
			HttpEntity<String> requestEntity = new HttpEntity<>(encryptedString,
					commonHeadersUtil.getHeadersWithXCmIdFromServer());

			result = restTemplate.exchange(uri, HttpMethod.POST, requestEntity, String.class);
			logger.info("requestEntity {}", requestEntity);
			logger.info("On-request result {}", result);

			if (result.getStatusCode().is2xxSuccessful()) {
				hipRequestRepository.save(prepareHipRequestSaveData(dataRequestDTO));
//				logger.info("DataRequestDTO {}", dataRequestDTO);
				uri = new URI(dataRequestDTO.getHiRequest().getDataPushUrl());
				logger.info("URI: {}", uri);
				encryptedString = new Gson().toJson(prepareDataNewDTO(dataRequestDTO));
				logger.info("encryptedString length: {}", encryptedString.length());
				requestEntity = new HttpEntity<>(encryptedString,
						commonHeadersUtil.getHeadersWithRefreshTokenFromServer());
				result = restTemplate.exchange(uri, HttpMethod.POST, requestEntity, String.class);
				logger.info("Data Transfer Request: {}", requestEntity);
				logger.info("After Data Transfer result: {}", result);
			}

		} catch (Exception e) {
			logger.info("Error in On-Request {} ", e);
		}
		return result;
	}

	private HipRequestEntity prepareHipRequestSaveData(DataRequestDTO dataRequestDTO){
		HiRequestDTO hiRequestDTO = dataRequestDTO.getHiRequest();
		DateRangeDTO dateRangeDTO = hiRequestDTO.getDateRange();
		KeyMaterialDTO keyMaterialDTO = hiRequestDTO.getKeyMaterial();
		DhPublicKeyDTO dhPublicKeyDTO = keyMaterialDTO.getDhPublicKey();
		return HipRequestEntity.builder().requestId(dataRequestDTO.getRequestId())
				.timestamp(dataRequestDTO.getTimestamp()).transactionId(dataRequestDTO.getTransactionId())
				.consentId(hiRequestDTO.getConsent().getId()).dateRangeFrom(dateRangeDTO.getFrom())
				.dateRangeTo(dateRangeDTO.getTo()).dataPushUrl(hiRequestDTO.getDataPushUrl())
				.cryptoAlg(keyMaterialDTO.getCryptoAlg()).curve(keyMaterialDTO.getCurve())
				.dhPublicKeyExpiry(dhPublicKeyDTO.getExpiry()).dhPublicKeyParameters(dhPublicKeyDTO.getParameters())
				.keyValue(dhPublicKeyDTO.getKeyValue()).nonce(keyMaterialDTO.getNonce()).build();
	}

	private DataTransferDTO prepareDataTransferDTO(DataRequestDTO dataRequestDTO) throws Exception {
		senderPublicPrivateKeygen();
		String senderPublicKey = getSenderPublicKey();
		String randomKeySender = senderNonce();
		KeyMaterialDTO receiverKeyMaterial = dataRequestDTO.getHiRequest().getKeyMaterial();
		logger.info("senderPublicKey {}", senderPublicKey);
		logger.info("randomKeySender {}", randomKeySender);
		logger.info("ReceiverPublicKey {}", receiverKeyMaterial.getDhPublicKey().getKeyValue());
		logger.info("randomKeyReceiver {}", receiverKeyMaterial.getNonce());
		String encryptedFhir = encrypt(receiverKeyMaterial.getNonce(),receiverKeyMaterial.getDhPublicKey().getKeyValue());

//		logger.info("encryptedFhir {}", encryptedFhir);

		EntryDTO entryDTO = EntryDTO.builder()
				.content(encryptedFhir)
				.media("application/fhir+json").checksum("")
				.careContextReference("CARE_CNTX_55009").build();

		logger.info("ReceiverKeyMaterialDTO {}", receiverKeyMaterial);


		KeyMaterialDTO keyMaterialDTO = KeyMaterialDTO.builder().cryptoAlg(receiverKeyMaterial.getCryptoAlg())
				                        .curve(receiverKeyMaterial.getCurve())
				                        .dhPublicKey(DhPublicKeyDTO.builder().expiry("2022-02-21T12:00:50.810Z")
												.parameters(receiverKeyMaterial.getDhPublicKey().getParameters())
												.keyValue(senderPublicKey).build())
				                        .nonce(randomKeySender).build();

		return DataTransferDTO.builder()
				.pageCount(1)
				.pageNumber(1)
				.transactionId(dataRequestDTO.getTransactionId())
				.entries(Arrays.asList(entryDTO))
                .keyMaterial(keyMaterialDTO)
				.build();
	}

	private DataTransferDTO prepareDataNewDTO(DataRequestDTO dataRequestDTO) throws Exception {
		logger.info("prepareDataNewDTO starts");
		String fhirString = "{\"resourceType\":\"Bundle\",\"id\":\"prescription-bundle-01\",\"meta\":{\"versionId\":\"1\",\"lastUpdated\":\"2020-07-09T15:32:26.605+05:30\",\"profile\":[\"https://nrces.in/ndhm/fhir/r4/StructureDefinition/DocumentBundle\"],\"security\":[{\"system\":\"http://terminology.hl7.org/CodeSystem/v3-Confidentiality\",\"code\":\"V\",\"display\":\"veryrestricted\"}]},\"identifier\":{\"system\":\"http://hip.in\",\"value\":\"bc3c6c57-2053-4d0e-ac40-139ccccff645\"},\"type\":\"document\",\"timestamp\":\"2020-07-09T15:32:26.605+05:30\",\"entry\":[{\"fullUrl\":\"Composition/Composition-01\",\"resource\":{\"resourceType\":\"Composition\",\"id\":\"Composition-01\",\"meta\":{\"versionId\":\"1\",\"lastUpdated\":\"2020-07-09T15:32:26.605+05:30\",\"profile\":[\"https://nrces.in/ndhm/fhir/r4/StructureDefinition/PrescriptionRecord\"]},\"language\":\"en-IN\",\"text\":{\"status\":\"generated\",\"div\":\"<divxmlns=\\\"http://www.w3.org/1999/xhtml\\\">Prescriptionreport</div>\"},\"identifier\":{\"system\":\"https://ndhm.in/phr\",\"value\":\"645bb0c3-ff7e-4123-bef5-3852a4784813\"},\"status\":\"final\",\"type\":{\"coding\":[{\"system\":\"http://snomed.info/sct\",\"code\":\"440545006\",\"display\":\"Prescriptionrecord\"}]},\"subject\":{\"reference\":\"Patient/Patient-01\"},\"date\":\"2017-05-27T11:46:09+05:30\",\"author\":[{\"reference\":\"Practitioner/Practitioner-01\"}],\"title\":\"Prescriptionrecord\",\"section\":[{\"title\":\"Prescriptionrecord\",\"code\":{\"coding\":[{\"system\":\"http://snomed.info/sct\",\"code\":\"440545006\",\"display\":\"Prescriptionrecord\"}]},\"entry\":[{\"reference\":\"MedicationRequest/MedicationRequest-01\",\"type\":\"MedicationRequest\"},{\"reference\":\"MedicationRequest/MedicationRequest-02\",\"type\":\"MedicationRequest\"},{\"reference\":\"Binary/Binary-01\",\"type\":\"Binary\"}]}]}},{\"fullUrl\":\"Patient/Patient-01\",\"resource\":{\"resourceType\":\"Patient\",\"id\":\"Patient-01\",\"meta\":{\"versionId\":\"1\",\"lastUpdated\":\"2020-07-09T14:58:58.181+05:30\",\"profile\":[\"https://nrces.in/ndhm/fhir/r4/StructureDefinition/Patient\"]},\"text\":{\"status\":\"generated\",\"div\":\"<divxmlns=\\\"http://www.w3.org/1999/xhtml\\\">ABC,41year,Male</div>\"},\"identifier\":[{\"type\":{\"coding\":[{\"system\":\"http://terminology.hl7.org/CodeSystem/v2-0203\",\"code\":\"MR\",\"display\":\"Medicalrecordnumber\"}]},\"system\":\"https://ndhm.in/SwasthID\",\"value\":\"1234\"}],\"name\":[{\"text\":\"ABC\"}],\"telecom\":[{\"system\":\"phone\",\"value\":\"+919818512600\",\"use\":\"home\"}],\"gender\":\"male\",\"birthDate\":\"1981-01-12\"}},{\"fullUrl\":\"Practitioner/Practitioner-01\",\"resource\":{\"resourceType\":\"Practitioner\",\"id\":\"Practitioner-01\",\"meta\":{\"versionId\":\"1\",\"lastUpdated\":\"2019-05-29T14:58:58.181+05:30\",\"profile\":[\"https://nrces.in/ndhm/fhir/r4/StructureDefinition/Practitioner\"]},\"text\":{\"status\":\"generated\",\"div\":\"<divxmlns=\\\"http://www.w3.org/1999/xhtml\\\">Dr.DEF,MD(Medicine)</div>\"},\"identifier\":[{\"type\":{\"coding\":[{\"system\":\"http://terminology.hl7.org/CodeSystem/v2-0203\",\"code\":\"MD\",\"display\":\"MedicalLicensenumber\"}]},\"system\":\"https://ndhm.in/DigiDoc\",\"value\":\"7601003178999\"}],\"name\":[{\"text\":\"Dr.DEF\"}]}},{\"fullUrl\":\"MedicationRequest/MedicationRequest-01\",\"resource\":{\"resourceType\":\"MedicationRequest\",\"id\":\"MedicationRequest-01\",\"meta\":{\"profile\":[\"https://nrces.in/ndhm/fhir/r4/StructureDefinition/MedicationRequest\"]},\"status\":\"active\",\"intent\":\"order\",\"medicationCodeableConcept\":{\"coding\":[{\"system\":\"http://snomed.info/sct\",\"code\":\"324252006\",\"display\":\"Azithromycin(asazithromycindihydrate)250mgoralcapsule\"}]},\"subject\":{\"reference\":\"Patient/Patient-01\",\"display\":\"ABC\"},\"authoredOn\":\"2020-07-09\",\"requester\":{\"reference\":\"Practitioner/Practitioner-01\",\"display\":\"DrDEF\"},\"reasonCode\":[{\"coding\":[{\"system\":\"http://snomed.info/sct\",\"code\":\"11840006\",\"display\":\"Traveller'sDiarrhea(disorder)\"}]}],\"reasonReference\":[{\"reference\":\"Condition/Condition-01\"}],\"dosageInstruction\":[{\"text\":\"Onetabletatonce\",\"additionalInstruction\":[{\"coding\":[{\"system\":\"http://snomed.info/sct\",\"code\":\"311504000\",\"display\":\"Withorafterfood\"}]}],\"timing\":{\"repeat\":{\"frequency\":1,\"period\":1,\"periodUnit\":\"d\"}},\"route\":{\"coding\":[{\"system\":\"http://snomed.info/sct\",\"code\":\"26643006\",\"display\":\"OralRoute\"}]},\"method\":{\"coding\":[{\"system\":\"http://snomed.info/sct\",\"code\":\"421521009\",\"display\":\"Swallow\"}]}}]}},{\"fullUrl\":\"MedicationRequest/MedicationRequest-02\",\"resource\":{\"resourceType\":\"MedicationRequest\",\"id\":\"MedicationRequest-02\",\"meta\":{\"profile\":[\"https://nrces.in/ndhm/fhir/r4/StructureDefinition/MedicationRequest\"]},\"status\":\"active\",\"intent\":\"order\",\"medicationCodeableConcept\":{\"text\":\"Paracetemol500mgOralTab\"},\"subject\":{\"reference\":\"Patient/Patient-01\",\"display\":\"ABC\"},\"authoredOn\":\"2020-07-09\",\"requester\":{\"reference\":\"Practitioner/Practitioner-01\",\"display\":\"DrDEF\"},\"reasonCode\":[{\"coding\":[{\"system\":\"http://snomed.info/sct\",\"code\":\"602001\",\"display\":\"Rossriverfever\"}]}],\"reasonReference\":[{\"reference\":\"Condition/Condition-01\"}],\"dosageInstruction\":[{\"text\":\"Taketwotabletsorallywithoraftermealonceaday\"}]}},{\"fullUrl\":\"Condition/Condition-01\",\"resource\":{\"resourceType\":\"Condition\",\"id\":\"Condition-01\",\"meta\":{\"profile\":[\"https://nrces.in/ndhm/fhir/r4/StructureDefinition/Condition\"]},\"text\":{\"status\":\"generated\",\"div\":\"<divxmlns=\\\"http://www.w3.org/1999/xhtml\\\">Abdominalpainon09-July2020</div>\"},\"code\":{\"coding\":[{\"system\":\"http://snomed.info/sct\",\"code\":\"21522001\",\"display\":\"Abdominalpain\"}],\"text\":\"Abdominalpain\"},\"subject\":{\"reference\":\"Patient/Patient-01\"}}},{\"fullUrl\":\"Binary/Binary-01\",\"resource\":{\"resourceType\":\"Binary\",\"id\":\"Binary-01\",\"meta\":{\"profile\":[\"https://nrces.in/ndhm/fhir/r4/StructureDefinition/Binary\"]},\"contentType\":\"application/pdf\",\"data\":\"R0lGODlhfgCRAPcAAAAAAIAAAACAAICAAAAAgIAAoxrXyMY2uvGNcIyjHOeoxkXBh44OOZdn8Ggu+DiPjwtJ2CZyUomCTRGO\"}}]}";

		KeyMaterialDTO receiverKeyMaterial = dataRequestDTO.getHiRequest().getKeyMaterial();
		KeyMaterial senderKeyMaterial = keysGenerator.generate();
		EncryptionRequest encryptionRequest = new EncryptionRequest(
				receiverKeyMaterial.getDhPublicKey().getKeyValue(), receiverKeyMaterial.getNonce(),
				senderKeyMaterial.getPrivateKey(), senderKeyMaterial.getPublicKey(),
				senderKeyMaterial.getNonce(), fhirString);

		EncryptionResponse encryptionResponse = encryption.encrypt(encryptionRequest);

		EntryDTO entryDTO = EntryDTO.builder()
				.content(encryptionResponse.getEncryptedData())
				.media("application/fhir+json").checksum("")
				.careContextReference("CARE_CNTX_55009").build();

		logger.info("ReceiverKeyMaterialDTO {}", receiverKeyMaterial);


		KeyMaterialDTO keyMaterialDTO = KeyMaterialDTO.builder().cryptoAlg(receiverKeyMaterial.getCryptoAlg())
				.curve(receiverKeyMaterial.getCurve())
				.dhPublicKey(DhPublicKeyDTO.builder().expiry("2022-02-21T12:00:50.810Z")
						.parameters(receiverKeyMaterial.getDhPublicKey().getParameters())
						.keyValue(senderKeyMaterial.getPublicKey()).build())
				.nonce(senderKeyMaterial.getNonce()).build();

		return DataTransferDTO.builder()
				.pageCount(1)
				.pageNumber(1)
				.transactionId(dataRequestDTO.getTransactionId())
				.entries(Arrays.asList(entryDTO))
				.keyMaterial(keyMaterialDTO)
				.build();
	}
	
	NotifyRequestDTO prepareNotifyDummy(DataRequestDTO dataRequestDTO) {
		NotifyNotificationDTO notifyNotificationDTO = NotifyNotificationDTO.builder().build();
		notifyNotificationDTO.setNotifier(NotifyNotifierDTO.builder().build());
		return NotifyRequestDTO.builder()
				.requestId(UUID.randomUUID().toString())
				.notification(notifyNotificationDTO)
				
				.build();
	}
	
	ResponseEntity<String> callNotify(DataRequestDTO dataRequestDTO){
		String url = transferNotify;
		ResponseEntity<String> result = null;
		URI uri;
		try {
			uri = new URI(url);
			String encryptedString = new Gson().toJson(prepareNotifyDummy(dataRequestDTO));
			HttpEntity<String> requestEntity = new HttpEntity<>(encryptedString,
					commonHeadersUtil.getHeadersWithXCmIdFromServer());
			result = restTemplate.exchange(uri, HttpMethod.POST, requestEntity, String.class);
		} catch (Exception e1) {
			logger.info("Error in on-discover health id missing  {} ", e1);
			result = new ResponseEntity<>(HttpStatus.EXPECTATION_FAILED);
		}
		return result;
	}
}
