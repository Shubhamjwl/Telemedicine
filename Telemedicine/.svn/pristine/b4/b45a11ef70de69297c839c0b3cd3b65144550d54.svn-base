import { DatePipe } from '@angular/common';
import { Component, Inject, OnInit } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';
import { MatDialog } from '@angular/material/dialog';
import { ActivatedRoute, Router } from '@angular/router';
import { NgbModal } from '@ng-bootstrap/ng-bootstrap';
import { NgxSpinnerService } from 'ngx-spinner';
import { DeleteAppointmentModalComponent } from 'src/app/layout/shared-modules/modals/delete-appointment-modal/delete-appointment-modal/delete-appointment-modal.component';
import { BookAppointmentModalComponent } from 'src/app/layout/shared-modules/modals/book-appointment-modal/book-appointment-modal.component';
import { ErrorSuccessMessage } from 'src/app/shared/commonBuildBlocks/enum/error-success-message.enum';
import { RoutesConstant } from 'src/app/shared/commonBuildBlocks/enum/routes.enum';
import { AppointmentService } from 'src/app/shared/commonBuildBlocks/services/appointmentServices/appointment.service';
import { AuthService } from 'src/app/shared/commonBuildBlocks/services/authSercies/auth.service';
import { ConsultationService } from 'src/app/shared/commonBuildBlocks/services/ConsultationServices/consultation.service';
import { DataPassingService } from 'src/app/shared/commonBuildBlocks/services/dataPassingServices/dataPassing.service';
import { PatientService } from 'src/app/shared/commonBuildBlocks/services/patientServices/patient.service';
import { ScribeService } from 'src/app/shared/commonBuildBlocks/services/scribeServices/scribe.service';
import { ToastMessageService } from 'src/app/shared/commonBuildBlocks/toaster/toast-message.service';
import { TcdoctorRegisterModalComponent } from 'src/app/layout/shared-modules/modals/tcdoctor-register-modal/tcdoctor-register-modal.component';

@Component({
	selector: 'app-doctor-appointments-dashboard',
	templateUrl: './doctor-appointments-dashboard.component.html',
	styleUrls: ['./doctor-appointments-dashboard.component.scss']
})
export class DoctorAppointmentsDashboardComponent implements OnInit {
	startDate: Date = new Date();
	profilePhoto: string = 'assets/images/img_avatar.png';
	colNo = [1, 2, 3, 4, 5, 6, 7, 8, 9];
	userID: any;
	userRole: any;
	selectedDate;
	appointmentSlotsList: any = [];
	slotsList = [];
	errorMsg: String;
	timeInterval: any;
	timer: any;
	filesArray: any[];
	uploadedFileNames: any[];
	modelRef: any;
	user: any;
	reasonGroup: FormGroup;
	reasonModelRef: any;
	drRegID: string;
	scribeListForDoctor: string[] = [];
	today: any;
	drConsultFee: number = 0;
	drconvenienceCharge: number = 0;
	slotType: any;
	consultType: any;
	previousApptType: any;
	patientInfo: any;
	rescheduleApptDetails: any;
	doctorDetails: any;
	isOpenPayment: boolean;
	rescheduleDetails: any;
	appointmentDetails: any;
	isPayLater: any;
	Valid: any;
	disableSlot: any;
	dialogRef: any;
	constructor(
		private appointmentService: AppointmentService,
		private dataPassingService: DataPassingService,
		private consultationService: ConsultationService,
		private patientService: PatientService,
		private toastrMessage: ToastMessageService,
		private scribeService: ScribeService,
		private authService: AuthService,
		private spinner: NgxSpinnerService,
		private fb: FormBuilder,
		private datePipe: DatePipe,
		private modelService: NgbModal,
		private dialog: MatDialog,
		private router: Router,
		private activateRoute: ActivatedRoute,
	
	) {
		this.reasonGroup = this.fb.group({
			apptId: [''],
			error: ['']
		});
		this.userID = authService.getUserId() ? authService.getUserId() : null;
		this.userRole = authService.getUserRole() ? authService.getUserRole() : null;
	}
	ngOnInit(): void {
		this.dataPassingService.callDocDashboard.subscribe(result => {
			this.getDetails();
		});
		this.selectedDate = this.datePipe.transform(this.startDate, "yyyy-MM-dd");
		this.today = this.datePipe.transform(new Date(), 'yyyy-MM-dd');
		// this.getDetails();
	}

	getDetails() {
		if (this.userRole === 'DOCTOR') {
			this.getDoctorProfileDetails();
			this.getAppointmentListForDoc();
			this.getScribeListByDoctorID();
		} else if (this.userRole === 'SCRIBE') {
			this.getAppointmentListForDoc();
			this.getScribeDetails();
			this.dataPassingService.docScribeList.next(null);
		} else if (this.userRole === 'RECEPTIONIST') {
			this.getAppointmentListForDoc();
		}
	}
	getAppointmentListForDoc() {
		this.spinner.show();
		this.appointmentService.getAppointmentListOfDoc(this.userID, this.selectedDate).subscribe((result: any) => {
			if (result.response && result.status) {
				this.spinner.hide();
				this.drRegID = result.response.drRegID ? result.response.drRegID : null;
				this.drConsultFee = result.response.doctorConsultFee ? result.response.doctorConsultFee : null;
				this.appointmentSlotsList = result.response ? result.response.apptDtls ? result.response.apptDtls.Today ? result.response.apptDtls.Today : [] : [] : [];
				this.slotsList = this.appointmentSlotsList.slots ? this.appointmentSlotsList.slots : [];
				this.drconvenienceCharge = result.response.convenienceCharge ? result.response.convenienceCharge : null;
				// this.appointmentService.slotDetails = this.appointmentSlotsList;
			} else if (result.errors) {
				this.spinner.hide();
				this.appointmentSlotsList = [];
				this.slotsList = [];
				this.errorMsg = result.errors ? result.errors[0] ? result.errors[0].message ? result.errors[0].message : null : null : null;
			}
		}, error => {
			this.spinner.hide();
			this.appointmentSlotsList = [];
			this.slotsList = [];
			this.errorMsg = error.errors ? error.errors[0] ? error.errors[0].message ? error.errors[0].message : null : null : null;
		})
	}

	changeDate(event) {
		this.selectedDate = this.datePipe.transform(event.target.value, "yyyy-MM-dd");
		this.getAppointmentListForDoc();
	}


	clickToBookAppointment(appointmentSlotsDetails, index) {
		if (appointmentSlotsDetails.status === 'Available') {
			let todaysDate = this.datePipe.transform(new Date(), 'yyyy-MM-dd');
			let appointmentSlotsDtls = appointmentSlotsDetails;
			let time = '00:00';
			let slotTime = appointmentSlotsDtls ? appointmentSlotsDtls.appointmentTime ? appointmentSlotsDtls.appointmentTime : time : time;
			let slotDate = appointmentSlotsDtls ? appointmentSlotsDtls.appointmentDate ? appointmentSlotsDtls.appointmentDate : this.selectedDate : this.selectedDate;
			let isValid = this.consultationService.isValidConsultation(slotTime, slotDate, todaysDate, true);
			let slotType = appointmentSlotsDtls.slotType ? appointmentSlotsDtls.slotType : " ";
			this.disableSlot = this.consultationService.isSlotAvalableAfter30(
				slotDate,
				slotTime
			);
			if (isValid) {
				if (this.disableSlot) {
					if (this.userRole == 'RECEPTIONIST' || this.userRole == 'DOCTOR' || this.userRole !== 'SCRIBE') {
						if (appointmentSlotsDtls && appointmentSlotsDtls.status === 'Available') {
							let apptSlotTime = slotTime
							let apptSlotDate = slotDate
							let SlotType = slotType
							this.openDialog(apptSlotTime, apptSlotDate, SlotType);
						}
					}
				} else {
					this.toastrMessage.showInfoMsg("Cannot book appointment for the slots within 30 mins", "Information");

				}
			} else { 
				this.toastrMessage.showInfoMsg("Can't book appointment for past time", "Information");

			}
		}
	}

	openDialog(slotTime, slotDate, slotType) {
		const dialogRef = this.dialog.open(BookAppointmentModalComponent, {
			disableClose: true,
			width: '500Px',
			data: { slotTime: slotTime, slotDate: slotDate, slotType: slotType, drId: this.drRegID, fees: this.drConsultFee, charge:this.drconvenienceCharge }
		});

		dialogRef.afterClosed().subscribe(result => {
			if (result && result.data) {
				this.getAppointmentListForDoc();
			}
		});
	}

	openDeleteDialog(){
		const dialogRef = this.dialog.open(DeleteAppointmentModalComponent, {
			disableClose: true,
			width: '900Px',
			height: '500px',
			// data: { slotTime: slotTime, slotDate: slotDate, slotType: slotType, drId: this.drRegID, fees: this.drConsultFee }
		});

		dialogRef.afterClosed().subscribe(result => {
			if (result) {
				this.getAppointmentListForDoc();
			}
		});
	}

	/* Used to navigate on Create time slot page */
	onClickTimeSlot() {
		this.router.navigate(['time']);
		// TODO: uncomment below for new UI  TmCreateSlotComponent
		// const dialogRef = this.dialog.open(TmStartConsPopUpComponent, {
		// 	disableClose: true,
		// 	// width:'766px',
        //     // height:'500px',
		// 	// data: { slotTime: slotTime, slotDate: slotDate, slotType: slotType, drId: this.drRegID, fees: this.drConsultFee }
		// });

		// dialogRef.afterClosed().subscribe(result => {
		// 	if (result) {
		// 		this.getAppointmentListForDoc();
		// 	}
		// });
	}
	
	//reschedule modal
	openModel(content, data, index) {
		if (this.timeInterval) {
			this.resetInterval();
		}
		this.timer = '';
		this.upcomingAppointmentCountdown(data.appointmentDate ? data.appointmentDate : data.apptDate, data.appointmentTime);
		let todaysDate1 = this.datePipe.transform(new Date(), 'yyyy-MM-dd');
		this.Valid = this.consultationService.validateConsultation(data.appointmentTime, data.appointmentDate, todaysDate1);
		this.filesArray = [];
		this.uploadedFileNames = [];
		this.modelRef = this.modelService.open(content, { size: 'xl', backdrop: 'static' });
		if (this.authService.isUserDoctor()) {
			data.profilephoto = this.profilePhoto;
		}
		this.user = data;
		this.dataPassingService.rescheduleApptDetails = data;
	}

	resetInterval() {
		clearInterval(this.timeInterval);
	}

	upcomingAppointmentCountdown(date, time) {
		this.timeInterval = null;
		let upcomingAppointmentDateTime = this.consultationService.getNextAppointmentTime(date, time);
		this.timeInterval = setInterval(() => {
			// Today's date & time 
			let now = new Date().getTime();
			// difference between current time & upcoming appointment
			let differenceStart = upcomingAppointmentDateTime[0] - now;
			let differenceEnd = upcomingAppointmentDateTime[1] - now;
			// Time calculation for days, hours, minutes & seconds
			if (differenceStart < 0 && differenceEnd < 0) {
				clearInterval(this.timeInterval);
				this.timer = "Appointment is not attended by user.";
			} else {
				if (differenceStart > 0) {
					let days = Math.floor(differenceStart / (1000 * 60 * 60 * 24));
					let hours = Math.floor((differenceStart % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))
					let minutes = Math.floor((differenceStart % (1000 * 60 * 60)) / (1000 * 60));
					let seconds = Math.floor((differenceStart % (1000 * 60)) / 1000);
					this.timer = days + "d : " + hours + "h : " + minutes + "m : " + seconds + "s";
				} else {
					let hours = Math.floor((differenceEnd % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))
					let minutes = Math.floor((differenceEnd % (1000 * 60 * 60)) / (1000 * 60));
					let seconds = Math.floor((differenceEnd % (1000 * 60)) / 1000);
					this.timer = hours + "h : " + minutes + "m : " + seconds + "s";
					this.timer = "You can start consultation till  " + this.timer;
				}
			}
		}, 1000);

	}

	getNextAppointmentTime(appdate, time) {
		if (appdate && time) {
			var d = new Date(appdate);
			let p = d.toDateString();
			let arr = p.split(' ');
			let rtime = time.split('-');

			let startDate = new Date(arr[1] + ' ' + arr[2] + ',' + ' ' + arr[3] + ' ' + rtime[0]).getTime();

			let endDate = new Date(arr[1] + ' ' + arr[2] + ',' + ' ' + arr[3] + ' ' + rtime[1]).getTime();

			return [startDate, endDate];
		}
		return null;
	}

	/**
	 * Used to navigate to consutation using selected Patient Appointment ID.
	 * @param apptID to store selected patient Appointment ID.
	 */
	// onClickAppointment(appointmentDetails, dayStatus, slot?) {
	// 	console.log("enter in onclick");
	// 	if (this.modelRef) {
	// 		this.modelRef.close();
	// 	}
	// 	let apptID = appointmentDetails.appointmentID ? appointmentDetails.appointmentID : null
	// 	let todaysDate = this.datePipe.transform(new Date(), 'yyyy-MM-dd');
	// 	let isValid = this.consultationService.validateConsultation(appointmentDetails.appointmentTime, appointmentDetails.appointmentDate, todaysDate);
	// 	console.log(isValid, todaysDate ,"isvalid");
	// 	if (isValid) {
	// 		if (appointmentDetails.status !== 'Completed') {
	// 			this.dataPassingService.userName = appointmentDetails.doctorName;
	// 			this.router.navigate(
	// 				[RoutesConstant.CONSULTATION],
	// 				{
	// 					queryParams: {
	// 						apptID,
	// 						drRegID: this.drRegID,
	// 						ptRegID: appointmentDetails.patientRegId, //'pt2'
	// 						// consultType:appointmentDetails.slotType,
	// 					}
	// 				}
	// 			)
	// 		}
	// 	} else {
	// 		this.toastrMessage.showWarningMsg(ErrorSuccessMessage.VALIDCONSULTATION, 'Warning');
	// 	}
		
	// }


	// 	rescheduleAppt(){
	// 		this.previousApptType = this.slotType;
	// 		if(this.slotType === "In-Clinic" || this.slotType === null){    
	// 			  this.rescheduleAppointment();
	// 		}
	// 		else{
	// 		 if(this.previousApptType === "Teleconsultation" || this.previousApptType === null) {
	// 		   this.rescheduleAppointment();
	// 		 }

	// 		  this.cancelAppointment();

	// 		} 

	// 	   //  || this.previousApptType === null
	//  }

	onClickAppointment(appointmentDetails, dayStatus, slot?) {
		if (this.modelRef) {
			this.modelRef.close();
		}
		let apptID = appointmentDetails.appointmentID ? appointmentDetails.appointmentID : null
		let todaysDate = this.datePipe.transform(new Date(), 'yyyy-MM-dd');
		let isValid = this.consultationService.validateConsultation(appointmentDetails.appointmentTime, appointmentDetails.appointmentDate, todaysDate);
		if (isValid) {
			if (appointmentDetails.status !== 'Completed') {
				this.dataPassingService.userName = appointmentDetails.doctorName;
				this.router.navigate(
					[RoutesConstant.CONSULTATION],
					{
						queryParams: {
							apptID,
							drRegID: this.drRegID,
							ptRegID: appointmentDetails.patientRegId,
							slotTime: appointmentDetails.appointmentTime//'pt2'
							// consultType:appointmentDetails.slotType,
						}
					}
				)
			}
		} else {
			this.toastrMessage.showWarningMsg(ErrorSuccessMessage.VALIDCONSULTATION, 'Warning');
		}
	}


	rescheduleAppointment() {

		this.modelRef.close();
		this.patientService.currentAction({ isRescedule: true, data: this.user });
		//this.dataPassingService.rescheduleApptDetails = this.user;
		this.router.navigate(['/doctor-appointments'], { queryParams: { isReschedule: true } });
		// {relativeTo: this.route}

	}

	//   rescheduleAppt(){
	// 	this.previousApptType = this.slotType;
	// 	if(this.slotType === "In-Clinic" || this.slotType === null){
	// 		this.rescheduleAppointment();
	// 	}

	// 	this.cancelAppointment();

	//   }

	openReasonModel(content, appID) {
		this.reasonGroup.reset();
		this.reasonGroup.get('apptId').patchValue(appID);
		this.reasonModelRef = this.modelService.open(content, { backdrop: 'static' });
	}


	cancelAppointment() {

		let data = {
			apptId: this.reasonGroup.get('apptId').value
			//this.appointmentDetails.appointmentID
		}
		this.appointmentService.cancelAppointment(data).subscribe((resp: any) => {
			this.spinner.hide();
			if (resp) {
				if (resp.status && resp.response && resp.response.info) {
					this.toastrMessage.showSuccessMsg(resp.response.info, "Success");
					this.reasonModelRef.close();
					this.modelRef.close();
					this.getAppointmentListForDoc();
				} else if (resp.errors) {
					this.reasonGroup.get('error').patchValue(resp.errors[0].message);
				}

			}
			// if (this.modelRef) {
			// 	this.modelRef.close();
			// 	this.reasonModelRef.close();
			// }
		});
	}

	// Used to show scribe profile details for scribe login
	getScribeDetails() {
		this.spinner.show();
		this.scribeService.getScribeProfileDetails().subscribe(result => {
			this.spinner.hide();
			if (result.response) {
				let res = result.response
				this.dataPassingService.docId = res.scrbdrUserIDfk ? res.scrbdrUserIDfk : null;
				this.profilePhoto = res.scribeProfilePhoto;
				let setProfileDetails = {
					profile: res.scribeProfilePhoto,
					name: res.scrbFullName,
					gender: res.scrbGender,
					mobileNo: res.scrbMobNo,
					emailId: res.scrbEmail,
					doctorName: res.scrbDrName
				}
				this.dataPassingService.setProfileDetails.next(setProfileDetails);
				this.dataPassingService.docName = res.scrbDrName;
				this.dataPassingService.doctorId = res.scrbdrUserIDfk;
				sessionStorage.setItem('Scribe_dr_Id', res.scrbdrUserIDfk);
			} else if (result.errors) {
			}
		}, error => {
			this.spinner.hide();
		});
	}

	/* Used to get already registered Doctor Profile details */
	getDoctorProfileDetails() {
		this.spinner.show();
		this.consultationService.getDoctorProfile(this.userID).subscribe(result => {
			this.spinner.hide();
			if (result.response) {
				let res = result.response
				this.dataPassingService.docId = localStorage.getItem('USER_ID') ? localStorage.getItem('USER_ID') : null;
				this.profilePhoto = res.profilePhoto;
				this.drConsultFee = res.dmdConsulFee ? res.dmdConsulFee : 0;
				this.drconvenienceCharge = res.dmdConvenienceCharge ? res.dmdConvenienceCharge : 0;
				let setProfileDetails = {
					profile: res.profilePhoto,
					name: res.dmdDrName,
					gender: res.dmdGender,
					mobileNo: res.dmdMobileNo,
					emailId: res.dmdEmail,
					specialization: res.dmdSpecialiazation,
					smcNo: res.dmdSmcNumber,
					mciNo: res.dmdMciNumber,
					doctorName: ''
				}
				sessionStorage.setItem('emailID', res.dmdEmail);
				this.dataPassingService.setProfileDetails.next(setProfileDetails);

				if(res.dmdTcFlag!=true){
					this.acceptTermsCondition();
				}

				this.dataPassingService.docName = res.dmdDrName;
			} else if (result.errors) {
			}
		}, error => {
			this.spinner.hide();
		})
	}

	acceptTermsCondition(){
	const dialogRef = this.dialog.open(TcdoctorRegisterModalComponent,{ disableClose: true });

    dialogRef.afterClosed().subscribe(result => {
	  if (result) {
		this.getAppointmentListForDoc();
	}
	 // this.getAppointmentListForDoc();
    });
  }
	

	/* Used to get List of scribe available for doctor */
	getScribeListByDoctorID() {
		this.spinner.show();
		this.consultationService.getScribeList().subscribe(result => {
			if (result.response) {
				this.spinner.hide();
				result.response.scribeDtls.forEach(item => {
					item.scribeAdded = 'false'
				})
				let scribeList = result.response.scribeDtls;
				this.scribeListForDoctor = scribeList;
				this.dataPassingService.docScribeList.next(scribeList);
				// this.listOfScribeDoctor = this.scribeList;
				// this.dataPassingService.scribeListForDoctor = this.scribeList;
				// this.dataPassingService.setScribeDetails(this.scribeList);
			} else if (result.errors) {
				this.spinner.hide();
			}
		}, error => {
			this.spinner.hide();
		})
	}

	onClickDeleteTimeSlot(){
		this.openDeleteDialog();
	}

	reloadCurrentRoute() {
		this.getAppointmentListForDoc();
	}

	
   
}

