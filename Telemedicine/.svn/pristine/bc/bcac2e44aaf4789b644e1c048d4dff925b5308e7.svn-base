import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { DistrictDTO } from 'src/app/models/common/DistrictDTO';
import { GenerateSessionRespDTO } from 'src/app/models/common/GenerateSessionRespDTO';
import { MainResponseDTO } from 'src/app/models/common/MainResponseDTO';
import { SearchByHealthIdDTO } from 'src/app/models/common/SearchByHealthIdDTO';
import { StateDtlsDTO } from 'src/app/models/common/StateDtlsDTO';
import { UserAuthRespDTO } from 'src/app/models/common/UserAuthRespDTO';
import { HealthCardDTO } from 'src/app/models/healthidMobile/HealthCardDTO';
import { HealthIDDTO } from 'src/app/models/healthidMobile/HealthIDDTO';
import { HealthIDResp } from 'src/app/models/healthidMobile/HealthIDResp';
import { ResendOtpResp } from 'src/app/models/healthidMobile/ResendOtpResp';
import { ToastMessageService } from 'src/app/shared/commonBuildBlocks/toaster/toast-message.service';
import { ERR_MSGS, REGEX } from 'src/config/constant';
import { HealthidCreationServiceService } from '../healthid-creation-service.service';
import { Location } from '@angular/common';

@Component({
  selector: 'app-patient-registered',
  templateUrl: './patient-registered.component.html',
  styleUrls: ['./patient-registered.component.css'],
})
export class PatientRegisteredComponent implements OnInit {
  timeLeft: number = 60;
  interval;
  startTimer() {
    this.interval = setInterval(() => {
      if (this.timeLeft > 0) {
        this.timeLeft--;
      }
      // else {
      //   this.timeLeft = 60;
      // }
    }, 1000);
  }
  ERR = ERR_MSGS;
  PATTERN = REGEX;
  token: any;
  txnId: any;
  otp: any;
  mobileNoSel: any;
  firstName: any;
  middleName: any;
  lastName: any;
  dateOfBirth: any;
  gender: any;
  email: any;
  address: any;
  pinCode: any;
  stateCode: any;
  districtCode: any;
  subDistrict: any;
  town: any;
  ward: any;
  village: any;
  photoFile: any;
  photoFileString: any;
  photoFileShow: any;
  dayOfBirth: any;
  monthOfBirth: any;
  yearOfBirth: any;
  healthId: any;
  healthId1: any;
  healthId2: any;
  healthIdNumber: any;
  password: any;
  confirmPassword: any;
  name: any;
  restrictions: any;
  refreshToken: any;
  accessToken: any;
  userAuthToken: any;
  isShownRegistration: boolean = true;
  isShownAfterRegistration: boolean = false;
  isShowPopup: boolean = false;
  isShowPopup2: boolean = false;
  isChecked: boolean = false;
  isChecked2: boolean = false;
  healthIdFlag: boolean = false;
  responseToken: MainResponseDTO<GenerateSessionRespDTO>;
  resendOtpResp: MainResponseDTO<ResendOtpResp>;
  healthIDResp: MainResponseDTO<HealthIDResp>;
  statesMainDTO: MainResponseDTO<StateDtlsDTO[]>;
  healthCardDTO: MainResponseDTO<HealthCardDTO>;
  userAuthRespDTO: MainResponseDTO<UserAuthRespDTO>;
  states: StateDtlsDTO[];
  districtsMainDTO: MainResponseDTO<DistrictDTO[]>;
  districts: DistrictDTO[];
  healthIDDTO = new HealthIDDTO();
  searchByHealthIdDTO = new SearchByHealthIdDTO();
  isMobileNoDisabled: boolean = true;
  hidePassword: boolean = true;
  hideReEnterPassword: boolean = true;
  showPopupButtonFlag: boolean = false;
  displayStyle = 'none';
  selectOptions = ['Male', 'Female', 'Transgender'];

  selectedOption = 'Male';
  constructor(
    private router: Router,
    private route: ActivatedRoute,
    private toastrMessage: ToastMessageService,
    private _servises: HealthidCreationServiceService,
    private _location: Location
  ) {}

  ngOnInit(): void {
    this.route.queryParams.subscribe((params) => {
      console.log(params);
      if (params && params.token) {
        this.token = params.token;
        //console.log('this.token::' + this.token);
      }
      if (params && params.name) {
        this.name = params.name;
        this.firstName = this.name;
      }
      if (params && params.gender) {
        this.gender = params.gender;
      }
      if (params && params.mobileNoSel) {
        this.mobileNoSel = params.mobileNoSel;
      }
      if (params && params.email) {
        this.email = params.email;
      }
      if (params && params.address) {
        this.address = params.address;
      }
      if (params && params.txnId) {
        this.txnId = params.txnId;
        console.log('this.txnId::' + this.txnId);
      }
      if (params && params.dob) {
        let dob = params.dob;
        if (dob != 'null' && dob != null && dob != undefined) {
          var splitted = dob.split('-', 3);
          this.yearOfBirth = splitted[2];
          this.monthOfBirth = splitted[1];
          this.dayOfBirth = splitted[0];
          if (this.monthOfBirth === '10') {
          } else {
            this.monthOfBirth = this.monthOfBirth.replace('0', '');
          }
          this.dateOfBirth =
            this.yearOfBirth + '-' + splitted[1] + '-' + this.dayOfBirth;
        }
      }
      // if (params && params.address) {
      //   this.address = params.address;
      // }
      // if (params && params.txnId) {
      //   this.txnId = params.txnId;
      //   console.log('this.txnId::' + this.txnId);
      // }
    });
    this.generateToken();
    //this.startTimer();
  }
  public imagePath: any;
  imgURL: any;
  public message: string | undefined;

  handleFileSelect(evt) {
    var files = evt.target.files;
    var file = files[0];

    if (files && file) {
      var reader = new FileReader();

      reader.onload = this._handleReaderLoaded.bind(this);

      reader.readAsBinaryString(file);
    }
  }

  _handleReaderLoaded(readerEvt) {
    var binaryString = readerEvt.target.result;
    this.photoFileString = btoa(binaryString);
    this.photoFileShow = 'data:image/jpg;base64,' + this.photoFileString;
    this.imgURL = true;
    //console.log('photoFileString::' + this.photoFileString);
  }
  next() {
    this.isShownRegistration = false;
    this.isShownAfterRegistration = false;
    this.isShowPopup = true;
    this.isShowPopup2 = false;
    this.resendOTP();
  }
  generateToken() {
    this._servises.generateToken().subscribe(
      (result) => {
        this.responseToken = result;
        this.refreshToken = this.responseToken.response.refreshToken;
        this.accessToken = this.responseToken.response.accessToken;
        if (
          this.responseToken &&
          this.responseToken.response &&
          this.responseToken.response.accessToken
        ) {
          this.getStates(this.accessToken);
        }
      },
      (error) => {
        //console.log(error.message, 'Error');
        this.toastrMessage.showErrorMsg(
          'Unable to generate accessToken',
          'Error'
        );
      }
    );
  }

  resendOTP() {
    this._servises.generateToken().subscribe(
      (result) => {
        this.startTimer();
        this.responseToken = result;
        this.refreshToken = this.responseToken.response.refreshToken;
        this.accessToken = this.responseToken.response.accessToken;
        if (
          this.responseToken &&
          this.responseToken.response &&
          this.responseToken.response.accessToken
        ) {
          this.resendOTPForMobile(this.accessToken);
        }
      },
      (error) => {
        //console.log(error.message, 'Error');
        this.toastrMessage.showErrorMsg('Something whent wrong', 'Error');
      }
    );
    this.isShownRegistration = false;
    this.isShownAfterRegistration = false;
    this.isShowPopup = true;
    this.isShowPopup2 = false;
  }
  resendOTPForMobile(accessToken) {
    this._servises.resendOTPForMobile(this.txnId, accessToken).subscribe(
      (result) => {
        this.resendOtpResp = result;
        //console.log('txnId', result.response.txnId);
      },
      (error) => {
        //console.log(error.message, 'Error');
        this.toastrMessage.showErrorMsg('Something whent wrong', 'Error');
      }
    );
  }
  getStates(accessToken) {
    this._servises.getStates(accessToken).subscribe(
      (result) => {
        this.statesMainDTO = result;
        this.states = result.response;
        //console.log('states:', this.states);
      },
      (error) => {
        //console.log(error.message, 'Error');
        this.toastrMessage.showErrorMsg('Something whent wrong', 'Error');
      }
    );
  }
  getDistricts() {
    if (this.stateCode == '') {
      this.districts = [];
    }
    for (let index = 0; index < this.states.length; index++) {
      const element = this.states[index].code;
      if (this.stateCode == element) {
        this.districts = this.states[index].districts;
      }
    }
  }
  dateOfBirthSplit() {
    var dateOfBirth = this.dateOfBirth;
    //console.log('this.dateOfBirth::' + this.dateOfBirth);
    if (dateOfBirth) {
      var splitted = dateOfBirth.split('-', 3);
      this.yearOfBirth = splitted[0];
      this.monthOfBirth = splitted[1];
      this.dayOfBirth = splitted[2];
      if (this.monthOfBirth === '10') {
      } else {
        this.monthOfBirth = this.monthOfBirth.replace('0', '');
      }
      //console.log(splitted);
      //console.log('this.dayOfBirth', this.dayOfBirth);
      //console.log('this.monthOfBirth', this.monthOfBirth);
      //console.log('this.yearOfBirth', this.yearOfBirth);
    }
  }
  checkHealthId() {
    this._servises.generateToken().subscribe(
      (result) => {
        this.responseToken = result;
        this.refreshToken = this.responseToken.response.refreshToken;
        this.accessToken = this.responseToken.response.accessToken;
        if (
          this.responseToken &&
          this.responseToken.response &&
          this.responseToken.response.accessToken
        ) {
          this.searchHealthId(this.accessToken);
        }
      },
      (error) => {
        //console.log(error.message, 'Error');
        this.toastrMessage.showErrorMsg(
          'Unable to generate refresh token',
          'Error'
        );
      }
    );
  }
  searchHealthId(accessToken) {
    this.searchByHealthIdDTO = new SearchByHealthIdDTO();
    this.searchByHealthIdDTO.healthId = this.healthId;
    this._servises
      .searchExistsByHealthId(accessToken, this.searchByHealthIdDTO)
      .subscribe(
        (result) => {
          this.healthIdFlag = result.response.status;
          //console.log('healthIdFlag::', this.healthIdFlag);
          if (this.healthIdFlag) {
            this.toastrMessage.showWarningMsg(
              'Health id already exist,please choose different one',
              'Warning'
            );
          }
        },
        (error) => {
          //console.log(error.message, 'Error');
          this.toastrMessage.showErrorMsg('Unable to Search healthId', 'Error');
        }
      );
  }
  submit() {
    let name =
      this.firstName +
      ' ' +
      (this.middleName ? this.middleName : '') +
      ' ' +
      (this.lastName ? this.lastName : '');
    console.log('name', name, this.txnId);

    this.healthIDDTO = new HealthIDDTO();
    this.healthIDDTO.address = this.address;
    this.healthIDDTO.dayOfBirth = this.dayOfBirth;
    this.healthIDDTO.districtCode = this.districtCode;
    this.healthIDDTO.email = this.email;
    this.healthIDDTO.firstName = this.firstName;
    this.healthIDDTO.gender = this.gender;
    this.healthIDDTO.healthId = this.healthId;
    this.healthIDDTO.lastName = this.lastName;
    this.healthIDDTO.middleName = this.middleName;
    this.healthIDDTO.monthOfBirth = this.monthOfBirth;
    // this.healthIDDTO.name = this.healthId;
    this.healthIDDTO.name = name;
    this.healthIDDTO.password = this.password;
    this.healthIDDTO.pincode = this.pinCode;
    this.healthIDDTO.profilePhoto = this.photoFileString;
    this.healthIDDTO.restrictions = this.restrictions;
    this.healthIDDTO.stateCode = this.stateCode;
    this.healthIDDTO.subdistrictCode = this.subDistrict;
    this.healthIDDTO.token = this.token;
    this.healthIDDTO.townCode = this.town;
    this.healthIDDTO.txnId = this.txnId;
    this.healthIDDTO.villageCode = this.village;
    this.healthIDDTO.wardCode = this.ward;
    this.healthIDDTO.yearOfBirth = this.yearOfBirth;
    this.healthIDDTO.mobileNo = this.mobileNoSel;

    this._servises
      .helathidCreationForMobile(this.accessToken, this.healthIDDTO)
      .subscribe(
        (result: any) => {
          this.healthIDResp = result;
          //console.log('result.response', result.response);
          this.healthIdNumber = result.response.healthIdNumber;
          this.healthId = result.response.healthId;
          this.isShownRegistration = true;
          this.isShowPopup = false;
          this.isShownAfterRegistration = true;
          this.isShowPopup2 = false;
        },
        (error) => {
          this.isShownRegistration = true;
          this.isShowPopup = false;
          this.isShownAfterRegistration = false;
          this.isShowPopup2 = false;
          //console.log(error.message, 'Error');
          this.toastrMessage.showErrorMsg('Something whent wrong', 'Error');
        }
      );
  }
  downloadHealthIdCard() {
    this._servises
      .userAuthWithPassword(
        //this.healthIdNumber,
        this.healthId,
        this.password,
        this.accessToken
      )
      .subscribe(
        (result) => {
          this.userAuthRespDTO = result;
          this.userAuthToken = result.response.token;
          //console.log('this.userAuthToken::', this.userAuthToken);
          this.downloadPDFCard(this.userAuthToken);
        },
        (error) => {
          //console.log(error.message, 'Error');
          this.toastrMessage.showErrorMsg('Something whent wrong', 'Error');
        }
      );
  }
  downloadPDFCard(userAuthToken) {
    this._servises.getCardInPdf(this.accessToken, userAuthToken).subscribe(
      (result) => {
        this.isShownRegistration = true;
        this.isShowPopup = false;
        this.isShownAfterRegistration = true;
        this.isShowPopup2 = false;

        let file = new Blob([result], { type: 'application/pdf' });
        var fileURL = URL.createObjectURL(file);
        window.open(fileURL);
        var link = document.createElement('a');
        link.href = window.URL.createObjectURL(file);
        link.download = 'Healthid.pdf';
        link.click();
        window.URL.revokeObjectURL(link.href);
      },
      (error) => {
        this.isShownRegistration = true;
        this.isShowPopup = false;
        this.isShownAfterRegistration = true;
        this.isShowPopup2 = false;
        //console.log(error.message, 'Error');
        this.toastrMessage.showErrorMsg('Something whent wrong', 'Error');
      }
    );
  }

  downloadHealthIdCardQR() {
    this._servises
      .userAuthWithPassword(
        //this.healthIdNumber,
        this.healthId,
        this.password,
        this.accessToken
      )
      .subscribe(
        (result) => {
          this.userAuthRespDTO = result;
          this.userAuthToken = result.response.token;
          //console.log('this.userAuthToken::', this.userAuthToken);
          this.downloadHealthidQR(this.userAuthToken);
        },
        (error) => {
          //console.log(error.message, 'Error');
          this.toastrMessage.showErrorMsg(
            'Unable to generate user Auth Token',
            'Error'
          );
        }
      );
  }
  downloadHealthidQR(userAuthToken) {
    this._servises.getCardInPng(this.accessToken, userAuthToken).subscribe(
      (result) => {
        this.isShownRegistration = true;
        this.isShowPopup = false;
        this.isShownAfterRegistration = true;
        this.isShowPopup2 = false;

        let file = new Blob([result], { type: 'application/png' });
        var fileURL = URL.createObjectURL(file);
        window.open(fileURL);

        var link = document.createElement('a');
        link.href = window.URL.createObjectURL(file);
        link.download = 'Healthid.png';
        link.click();
        window.URL.revokeObjectURL(link.href);
      },
      (error) => {
        this.isShownRegistration = true;
        this.isShowPopup = false;
        this.isShownAfterRegistration = true;
        this.isShowPopup2 = false;
        //console.log(error.message, 'Error');
        this.toastrMessage.showErrorMsg('Something whent wrong', 'Error');
      }
    );
  }
  nextPopup() {
    this.isShownRegistration = false;
    this.isShowPopup = false;
    this.isShownAfterRegistration = false;
    this.isShowPopup2 = true;
  }
  back() {
    //this._location.back();
    window.history.back();
  }
  backPopup() {
    this.isShownRegistration = true;
    this.isShownAfterRegistration = false;
    this.isShowPopup = false;
    this.isShowPopup2 = false;
  }

  hide() {
    this.hidePassword = !this.hidePassword;
  }

  hideReEnter() {
    this.hideReEnterPassword = !this.hideReEnterPassword;
  }
  showPopup() {
    this.showPopupButtonFlag = true;
    this.toastrMessage.showSuccessMsg(
      'Health ID created and mapped to Profile',
      'Success'
    );
  }

  openPopup() {
    this.displayStyle = 'block';
  }
  closePopup() {
    this.displayStyle = 'none';
  }
  removeImage(imgURL) {
    this.imgURL = false;
  }
}
