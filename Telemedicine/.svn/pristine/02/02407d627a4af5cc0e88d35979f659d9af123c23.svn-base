import { Component, Inject, OnInit, ViewChild } from '@angular/core';
import { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';
import { MatPaginator } from '@angular/material/paginator';
import { MatTableDataSource } from '@angular/material/table';
import { AuthService } from 'src/app/shared/commonBuildBlocks/services/authSercies/auth.service';
import { DocumentService } from 'src/app/shared/commonBuildBlocks/services/documentServices/document.service';
import { PatientService } from 'src/app/shared/commonBuildBlocks/services/patientServices/patient.service';
import { ToastMessageService } from 'src/app/shared/commonBuildBlocks/toaster/toast-message.service';

@Component({
  selector: 'app-historical-completed-appointments-modal',
  templateUrl: './historical-completed-appointments-modal.component.html',
  styleUrls: ['./historical-completed-appointments-modal.component.scss']
})
export class HistoricalCompletedAppointmentsModalComponent implements OnInit {

  
  displayedColumns = ['appointmentId','name','date','view','download'];
  dataSource = new MatTableDataSource<any>();
	@ViewChild(MatPaginator) paginator: MatPaginator;
  
  constructor(
    public dialogRef: MatDialogRef<HistoricalCompletedAppointmentsModalComponent>,
    @Inject(MAT_DIALOG_DATA) public data: any,
    public patientService: PatientService,
    public authService: AuthService,
    public toastMessage: ToastMessageService,
    public documentService: DocumentService
    ) { }

  ngOnInit(): void {
    this.search();
  }

  search(){

		let payload:any = {
			apptId : null ,
		  	doctorName : this.data.name ? this.data.name ? this.data.name : null : null,
			fromDate : null,
			toDate : null
    }
    
		this.dataSource.data = [];

		this.patientService.searchCompletedAppointments(payload).subscribe((resp:any)=> {
			if(resp && resp.response && resp.status) {
				 this.dataSource.data = resp.response;
				 setTimeout(() => {
					this.dataSource.paginator = this.paginator;
				  }, 500)

			   }else if(resp && resp.errors && !resp.status) {
				 this.toastMessage.showErrorMsg( resp.errors[0].message, 'Error');
			   }
			 },error => {
			   this.toastMessage.showErrorMsg( error.errors[0].message, 'Error');
		})
  }
  
  getPrescriptionDetails(data, type){
		let postData = {
			request: {
				ctApptId : data.appointmentId, 
				ctDoctorId : data.doctorId, 
				ctPatientId : this.authService.isUserPatient() ? this.authService.getUserId() : data.patientId
			},
		}
		this.patientService.getPrescriptionDetails(postData).subscribe((resp:any)=> {
			if(resp && resp.response && resp.status) {
				var pdfpath = resp.response.pdfpath
				var filename = pdfpath.substring(pdfpath.lastIndexOf('/')+1);
				var  name =filename.split('.').slice(0, -1).join('.');
				console.log(filename ,name, "Filenameeeeeeeeeeee");
                sessionStorage.setItem('ctAppId',name);
				if(resp && resp.response.pdfData){
					if(type =='view'){
						this.documentService.downloadFileAndView(resp.response.pdfData,'application/pdf');
					}else {
						this.documentService.downloadFileToBrowser(resp.response.pdfData, 'application/pdf');
					}
				}
				 //this.toastMessage.showSuccessMsg(resp.response.message, "Success");
			   }else if(resp && resp.errors && !resp.status) {
				 this.toastMessage.showErrorMsg( resp.errors[0].message, 'Error');
			   }
			 },error => {
			   this.toastMessage.showErrorMsg( error.errors[0].message, 'Error');
		})
  }
  
  
  onClickClose() {
    this.dialogRef.close();
  }

}
