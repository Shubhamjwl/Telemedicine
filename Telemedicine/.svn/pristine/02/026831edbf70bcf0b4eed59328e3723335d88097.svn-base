package com.nsdl.telemedicine.videoConference.service.impl;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.apache.commons.codec.digest.DigestUtils;
import org.springframework.stereotype.Service;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import com.nsdl.telemedicine.videoConference.dto.BBBModule;
import com.nsdl.telemedicine.videoConference.dto.CreateMeetingRequest;
import com.nsdl.telemedicine.videoConference.dto.CreateMeetingResponse;
import com.nsdl.telemedicine.videoConference.dto.JoinMeetingRequest;
import com.nsdl.telemedicine.videoConference.dto.JoinMeetingResponse;
import com.nsdl.telemedicine.videoConference.exception.BBBException;
import com.nsdl.telemedicine.videoConference.service.BBBMeeting;

@Service
public class BBBMeetingImpl implements BBBMeeting {
	
	 protected String bbbUrl = "https://test-install.blindsidenetworks.com/bigbluebutton";

	protected String bbbSalt = "8cd8ef52e8e101574e400365b55e11a6";
	
	 protected final static String API_SERVERPATH = "/api/";
	 
	    protected final static String APIRESPONSE_FAILED = "FAILED";
	    
	    protected final static String APICALL_GETCONFIGXML = "getDefaultConfigXML";
	    protected final static String APICALL_CREATE = "create";
		protected final static String APICALL_JOIN = "join";


	
	@Override
	public CreateMeetingResponse createMeeting(CreateMeetingRequest meeting,BBBModule module) throws BBBException {
		
		try {
   		 StringBuilder query = new StringBuilder();
   		 query.append("meetingID=" + meeting.getMeetingId());
   		 if (meeting.getName() != null)
   			 query.append("&name=" + encode(meeting.getName()));
   		 if (meeting.getAttendeePassword() != null)
   			 query.append("&attendeePW=" + meeting.getAttendeePassword());
   		 if (meeting.getModeratorPassword() != null)
   			 query.append("&moderatorPW=" + meeting.getModeratorPassword());
   		 if (meeting.getWelcome() != null)
   			 query.append("&welcome=" + encode(meeting.getWelcome()));
   		 if (meeting.getVoiceBridge() != null)
   			 query.append("&voiceBridge=" + meeting.getVoiceBridge());
   			 query.append("&record=" + Boolean.toString(meeting.isRecord()));
            query.append(getCheckSumParameterForQuery(APICALL_CREATE, query.toString()));
            
            Map<String, Object> response = doAPICall(APICALL_CREATE, query.toString(),
           		 module == null ? null : module.to_xml());

            // capture important information from returned response
            CreateMeetingResponse createResponse=new CreateMeetingResponse();
            createResponse.setModeratorPW((String)response.get("moderatorPW"));
            createResponse.setAttendeePW((String)response.get("attendeePW"));
            createResponse.setMeetingID((String)response.get("meetingID"));
            createResponse.setVoiceBridge((String)response.get("voiceBridge"));
            createResponse.setInternalMeetingID((String)response.get("internalMeetingID"));
            createResponse.setDuration((String)response.get("parentMeetingID"));
            createResponse.setMessageKey((String)response.get("messageKey"));
            createResponse.setMessage((String)response.get("message"));
            SimpleDateFormat formatter = new SimpleDateFormat("EEE MMM d HH:mm:ss zzz yyyy");
            try {
            	createResponse.setStartDate(formatter.parse((String)response.get("createDate")));
			} catch (ParseException e) { }
            
            return createResponse;
        } catch (BBBException e) {
            throw e;
        } catch (IOException e) {
            throw new BBBException(BBBException.MESSAGEKEY_INTERNALERROR, e.getMessage(), e);
        }
	}
	
	 protected String getCheckSumParameterForQuery(String apiCall,
	            String queryString) {
	        if (bbbSalt != null)
	            return "&checksum=" + DigestUtils.shaHex(apiCall + queryString + bbbSalt);
	        else
	            return "";
	    }
	 
	 private String encode(String msg) throws UnsupportedEncodingException {
	    	return URLEncoder.encode(msg, getParametersEncoding());
	    }
	 
	 protected String getParametersEncoding() {
	        return "UTF-8";
	    }
	 
	 public JoinMeetingResponse getJoinMeetingURL(JoinMeetingRequest joinRequest) {
			StringBuilder url = null;
			JoinMeetingResponse joinMeetResponse=new JoinMeetingResponse();
			String userDisplayName = joinRequest.getUserDisplayName();
			String userId = joinRequest.getUserId();
			try {
				StringBuilder joinQuery = new StringBuilder();
				joinQuery.append("meetingID=" + joinRequest.getMeetingID());
				if (userId != null)
					joinQuery.append("&userID=" + encode(joinRequest.getUserId()));

				joinQuery.append("&fullName=");
				userDisplayName = (userDisplayName == null) ? "user" : userDisplayName;
				try {
					joinQuery.append(encode(userDisplayName));
				} catch (UnsupportedEncodingException e) {
					joinQuery.append(userDisplayName);
				}
				joinQuery.append("&password=" + joinRequest.getPassword());
				joinQuery.append("&record=" + Boolean.toString(joinRequest.isRedirect()));
				joinQuery.append(getCheckSumParameterForQuery(APICALL_JOIN, joinQuery.toString()));

				url = new StringBuilder(bbbUrl);
				if (url.toString().endsWith("/api")) {
					url.append("/");
				} else {
					url.append(API_SERVERPATH);
				}
				url.append(APICALL_JOIN + "?" + joinQuery);
			} catch (UnsupportedEncodingException e) {
			}
			joinMeetResponse.setUrl(url.toString());
			return joinMeetResponse;
		}
	 
	 protected Map<String, Object> doAPICall(String apiCall, String query, String data) throws BBBException {
	        StringBuilder urlStr = new StringBuilder(bbbUrl);
	        if (urlStr.toString().endsWith("/api")){
	            urlStr.append("/");
	        } else {
	            urlStr.append(API_SERVERPATH);
	        }
	        urlStr.append(apiCall);
	        if (query != null) {
	            urlStr.append("?");
	            urlStr.append(query);
	        }
	        
	        try {
	            // open connection
	            URL url = new URL(urlStr.toString());
	            HttpURLConnection httpConnection = (HttpURLConnection) url.openConnection();
	            httpConnection.setUseCaches(false);
	            httpConnection.setDoOutput(true);
	            if(data != null){
	                httpConnection.setRequestMethod("POST");
	                httpConnection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
	                httpConnection.setRequestProperty("Content-Length", "" + data.length());
	                httpConnection.setRequestProperty("Content-Language", "en-US");
	                httpConnection.setDoInput(true);

	                DataOutputStream wr = new DataOutputStream( httpConnection.getOutputStream() );
	                wr.writeBytes (data);
	                wr.flush();
	                wr.close();
	            } else {
	                httpConnection.setRequestMethod("GET");
	            }
	            httpConnection.connect();
	            
	            int responseCode = httpConnection.getResponseCode();
	            if (responseCode == HttpURLConnection.HTTP_OK) {
	                // read response
	                InputStreamReader isr = null;
	                BufferedReader reader = null;
	                StringBuilder xml = new StringBuilder();
	                try {
	                    isr = new InputStreamReader(httpConnection.getInputStream(), "UTF-8");
	                    reader = new BufferedReader(isr);
	                    String line = reader.readLine();
	                    while (line != null) {
	                    	if( !line.startsWith("<?xml version=\"1.0\"?>"))
	                    		xml.append(line.trim());
	                        line = reader.readLine();
	                    }
	                } finally {
	                    if (reader != null)
	                        reader.close();
	                    if (isr != null)
	                        isr.close();
	                }
	                httpConnection.disconnect();

	                // parse response
	                //Patch to fix the NaN error
	                String stringXml = xml.toString();
	                stringXml = stringXml.replaceAll(">.\\s+?<", "><");
	                
	                if (apiCall.equals(APICALL_GETCONFIGXML)) {
	                	Map<String, Object> map = new HashMap<String, Object>();
	                	map.put("xml", stringXml);
	                	return map;
	                }
	                
	                Document dom = null;

	                // Initialize XML libraries
	                DocumentBuilderFactory docBuilderFactory;
	                DocumentBuilder docBuilder;
	                docBuilderFactory = DocumentBuilderFactory.newInstance();
	                try {
	                    docBuilderFactory.setFeature("http://xml.org/sax/features/external-general-entities", false);
	                    docBuilderFactory.setFeature("http://xml.org/sax/features/external-parameter-entities", false);

	                    docBuilder = docBuilderFactory.newDocumentBuilder();
	                    dom = docBuilder.parse(new InputSource( new StringReader(stringXml)));
	                } catch (ParserConfigurationException e) { }
	                Map<String, Object> response = getNodesAsMap(dom, "response");

	                String returnCode = (String) response.get("returncode");
	                if (APIRESPONSE_FAILED.equals(returnCode)) {
	                    throw new BBBException((String) response.get("messageKey"), (String) response.get("message"));
	                }
	                
	                return response;
	            } else {
	                throw new BBBException(BBBException.MESSAGEKEY_HTTPERROR, "BBB server responded with HTTP status code " + responseCode);
	            }

			} catch(BBBException e) {
				throw new BBBException( e.getMessageKey(), e.getMessage(), e);
	        } catch(IOException e) {
	            throw new BBBException(BBBException.MESSAGEKEY_UNREACHABLE, e.getMessage(), e);
	        } catch(SAXException e) {
	        	throw new BBBException(BBBException.MESSAGEKEY_INVALIDRESPONSE, e.getMessage(), e);
	        } catch(IllegalArgumentException e) {
	        	throw new BBBException(BBBException.MESSAGEKEY_INVALIDRESPONSE, e.getMessage(), e);
	        } catch(Exception e) {
	            throw new BBBException(BBBException.MESSAGEKEY_UNREACHABLE, e.getMessage(), e);
	        }
	 }
	 
	 protected Map<String, Object> getNodesAsMap(Document dom, String elementTagName) {
	        Node firstNode = dom.getElementsByTagName(elementTagName).item(0);
	        return processNode(firstNode);
	    }

	    protected Map<String, Object> processNode(Node _node) {
	        Map<String, Object> map = new HashMap<String, Object>();
	        NodeList responseNodes = _node.getChildNodes();
	        int images = 1; //counter for images (i.e image1, image2, image3)
	        for (int i = 0; i < responseNodes.getLength(); i++) {
	            Node node = responseNodes.item(i);
	            String nodeName = node.getNodeName().trim();
	            if (node.getChildNodes().getLength() == 1
	                    && ( node.getChildNodes().item(0).getNodeType() == org.w3c.dom.Node.TEXT_NODE || node.getChildNodes().item(0).getNodeType() == org.w3c.dom.Node.CDATA_SECTION_NODE) ) {
	            	String nodeValue = node.getTextContent();
	                if (nodeName == "image" && node.getAttributes() != null){
	                    Map<String, String> imageMap = new HashMap<String, String>();
	                    Node heightAttr = node.getAttributes().getNamedItem("height");
	                    Node widthAttr = node.getAttributes().getNamedItem("width");
	                    Node altAttr = node.getAttributes().getNamedItem("alt");

	                    imageMap.put("height", heightAttr.getNodeValue());
	                    imageMap.put("width", widthAttr.getNodeValue());
	                    imageMap.put("title", altAttr.getNodeValue());
	                    imageMap.put("url", nodeValue);
	                    map.put(nodeName + images, imageMap);
	                    images++;
	                } else {
	                    map.put(nodeName, nodeValue != null ? nodeValue.trim() : null);
	                }
	            } else if (node.getChildNodes().getLength() == 0
	                    && node.getNodeType() != org.w3c.dom.Node.TEXT_NODE
	                    && node.getNodeType() != org.w3c.dom.Node.CDATA_SECTION_NODE) {
	                map.put(nodeName, "");
	            } else if (node.getChildNodes().getLength() >= 1) {
	            	boolean isList = false;
	            	for (int c = 0; c < node.getChildNodes().getLength(); ++c) {
	            		try {
	            			Node n = node.getChildNodes().item(c);
	            			if (n.getChildNodes().item(0).getNodeType() != org.w3c.dom.Node.TEXT_NODE
	                              && n.getChildNodes().item(0).getNodeType() != org.w3c.dom.Node.CDATA_SECTION_NODE) {
	            				isList = true;
	            				break;
	            			}
	            		} catch (Exception e) {
	            			continue;
	            		}
	            	}
	            	List<Object> list = new ArrayList<Object>();
	            	if (isList) {
	            		for (int c = 0; c < node.getChildNodes().getLength(); ++c) {
	            			Node n = node.getChildNodes().item(c);
	            			list.add(processNode(n));
	            		}
	            		if (nodeName == "preview"){
	            			Node n = node.getChildNodes().item(0);
	            			map.put(nodeName, new ArrayList<Object>(processNode(n).values()));
	            		} else {
	            			map.put(nodeName, list);
	            		}
	            	} else {
	            		map.put(nodeName, processNode(node));
	            	}
	            } else {
	                map.put(nodeName, processNode(node));
	            }
	        }
	        return map;
	    }
	        

}
