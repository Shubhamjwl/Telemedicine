package com.nsdl.telemedicine.service.impl;

import java.io.File;
import java.io.FileOutputStream;
import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.util.Base64;
import java.util.UUID;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;
import org.springframework.stereotype.Service;

import com.nsdl.telemedicine.constant.ErrorConstants;
import com.nsdl.telemedicine.dto.MarketPlaceDetailsDTO;
import com.nsdl.telemedicine.dto.MarketPlaceDtlsResponseDTO;
import com.nsdl.telemedicine.dto.OrderDetailsDTO;
import com.nsdl.telemedicine.dto.OrderDetailsResponse;
import com.nsdl.telemedicine.entity.MarketPlaceDetailsEntity;
import com.nsdl.telemedicine.exception.MarketPlaceDetailsException;
import com.nsdl.telemedicine.repository.MarketPlaceDtlsRepo;
import com.nsdl.telemedicine.service.MarketPlaceService;

@Service
public class MarketPlaceServiceImpl implements MarketPlaceService {

	@Autowired
	private MarketPlaceDtlsRepo marketRepo;

	@Autowired
	private Environment environment;

	public static final String separator = "/";
	public static final String dot = ".";

	private static final Logger logger = LoggerFactory.getLogger(MarketPlaceServiceImpl.class);

	@Override
	public MarketPlaceDtlsResponseDTO saveMarketPlaceDetailsUrl(MarketPlaceDetailsDTO marketPlaceDtls) {
		validateMobileNumber(marketPlaceDtls.getPtMobile());
		MarketPlaceDtlsResponseDTO marketResponse = new MarketPlaceDtlsResponseDTO();
		MarketPlaceDetailsEntity marketDtlsEntity = new MarketPlaceDetailsEntity();
		marketDtlsEntity.setModTranstIid(marketPlaceDtls.getTranstId());
		marketDtlsEntity.setModDrEmail(marketPlaceDtls.getDrEmail());
		marketDtlsEntity.setModPtNname(marketPlaceDtls.getPtNname());
		marketDtlsEntity.setModPtMobile(marketPlaceDtls.getPtMobile());
		MarketPlaceDetailsEntity saveDetails = marketRepo.save(marketDtlsEntity);
		if (saveDetails != null) {
			String clientSecret = environment.getProperty("market.place.client.secret");
			marketResponse.setClientSecret(clientSecret);
			return marketResponse;
		} else {
			logger.error("Market place details not saved in DB");
			throw new MarketPlaceDetailsException(ErrorConstants.MARKET_PLACE_DTLS_NOT_SAVED.getCode(),
					ErrorConstants.MARKET_PLACE_DTLS_NOT_SAVED.getMessage());
		}
	}

	@Override
	public OrderDetailsResponse savetOrderPlaceDetails(OrderDetailsDTO orderDetailsDTO) {
		validateMobileNumber(orderDetailsDTO.getPtMobile());
		MarketPlaceDetailsEntity marketDtlsEntity = null;
		if (orderDetailsDTO.getTranstId() == null || orderDetailsDTO.getTranstId().isEmpty()) {
			UUID uuid = UUID.randomUUID();
			orderDetailsDTO.setTranstId(uuid.toString());
			marketDtlsEntity = new MarketPlaceDetailsEntity();
		} else {
			marketDtlsEntity = marketRepo.findByModTranstIid(orderDetailsDTO.getTranstId()).get();
		}
		OrderDetailsResponse orderResponse = new OrderDetailsResponse();
		marketDtlsEntity.setModTranstIid(orderDetailsDTO.getTranstId());
		marketDtlsEntity.setModDrEmail(orderDetailsDTO.getDrEmail());
		marketDtlsEntity.setModPtNname(orderDetailsDTO.getPtNname());
		marketDtlsEntity.setModPtMobile(orderDetailsDTO.getPtMobile());
		marketDtlsEntity.setModOrderId(orderDetailsDTO.getOrderId());
		marketDtlsEntity.setModOrderDate(orderDetailsDTO.getOrderDate());
		marketDtlsEntity.setModOrderStatus(orderDetailsDTO.getOrderStatus());

		// encoding prescription file and save on path
		String path = environment.getProperty("precription_path");
		String fileName = orderDetailsDTO.getPrescriptionFileName();
		String fileType = orderDetailsDTO.getPrescriptionFileType();
		File file = new File(path + separator + fileName + dot + fileType);
		try (FileOutputStream fos = new FileOutputStream(file);) {
			byte[] decodeString = Base64.getDecoder().decode(orderDetailsDTO.getPrescriptionFile());
			fos.write(decodeString);
			logger.info("Prescription file saved in path");
		} catch (Exception e) {
			logger.error("Prescription file not saved");
			throw new MarketPlaceDetailsException(ErrorConstants.FILE_NOT_SAVED.getCode(),
					ErrorConstants.FILE_NOT_SAVED.getMessage());
		}
		marketDtlsEntity.setModOrderPrescriptionPath(path);
		marketDtlsEntity.setModCreationBy(orderDetailsDTO.getDrEmail());
		marketDtlsEntity.setModCreationTmstmp(Timestamp.valueOf(LocalDateTime.now()));
		marketDtlsEntity.setModModifyBy(orderDetailsDTO.getDrEmail());
		marketDtlsEntity.setModModifyTmstmp(Timestamp.valueOf(LocalDateTime.now()));
		marketDtlsEntity.setModOrderPrescriptionPath(path);
		MarketPlaceDetailsEntity orderDetals = marketRepo.save(marketDtlsEntity);
		if (orderDetals != null) {
			orderResponse.setStatus("Order details saved successfully");
			return orderResponse;
		} else {
			logger.error("Order details not saved in DB");
			throw new MarketPlaceDetailsException(ErrorConstants.ORDER_DTLS_NOT_SAVED.getCode(),
					ErrorConstants.ORDER_DTLS_NOT_SAVED.getMessage());

		}
	}

	public static boolean validateMobileNumber(String mobileNumber) {
		boolean flag = false;
		logger.info("validate mobile number");
		// validating number size
		if (mobileNumber.length() == 10) {
			flag = true;
		} else {
			logger.error("Mobile number not valid");
			throw new MarketPlaceDetailsException(ErrorConstants.PT_MOBILE_LENGTH_NOT_VALID.getCode(),
					ErrorConstants.PT_MOBILE_LENGTH_NOT_VALID.getMessage());
		}
		// validating numeric
		String regex = "[0-9]+";
		Pattern pattern = Pattern.compile(regex);
		Matcher m = pattern.matcher(mobileNumber);
		if (m.matches()) {
			flag = true;
		} else {
			logger.error("Mobile number length not correct");
			throw new MarketPlaceDetailsException(ErrorConstants.PT_MOBILE_NOT_VALID.getCode(),
					ErrorConstants.PT_MOBILE_NOT_VALID.getMessage());
		}

		return flag;
	}
}
