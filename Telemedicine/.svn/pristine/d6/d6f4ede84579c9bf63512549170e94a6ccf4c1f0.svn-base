import { Component, Inject, OnInit } from '@angular/core';
import { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';
import { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';
import { ActivatedRoute, Router } from '@angular/router';
import { NgxSpinnerService } from 'ngx-spinner';
import { Observable } from 'rxjs';
import { debounceTime, map, startWith } from 'rxjs/operators';
import { ErrorSuccessMessage } from 'src/app/shared/commonBuildBlocks/enum/error-success-message.enum';
import { IPatient } from 'src/app/shared/commonBuildBlocks/interfaces/patient.interface';
import { DataPassingService } from 'src/app/shared/commonBuildBlocks/services/dataPassingServices/dataPassing.service';
import { PatientService } from 'src/app/shared/commonBuildBlocks/services/patientServices/patient.service';
import { ToastMessageService } from 'src/app/shared/commonBuildBlocks/toaster/toast-message.service';
import { DatePipe } from '@angular/common';
import { DateAdapter, MAT_DATE_FORMATS } from '@angular/material/core';
import { DdateAdapter, MY_FORMATS } from 'src/app/shared/commonBuildBlocks/derectives/formatDatepickers';
import { PaymentOptionModalComponent } from '../payment-option-modal/payment-option-modal.component';
import { AuthService } from 'src/app/shared/commonBuildBlocks/services/authSercies/auth.service';
import { AppointmentService } from 'src/app/shared/commonBuildBlocks/services/appointmentServices/appointment.service';
import { isThisISOWeek } from 'date-fns';

@Component({
  selector: 'app-book-appointment-modal',
  templateUrl: './book-appointment-modal.component.html',
  styleUrls: ['./book-appointment-modal.component.scss'],
  providers: [
    { provide: DateAdapter, useClass: DdateAdapter },
    { provide: MAT_DATE_FORMATS, useValue: MY_FORMATS }
  ]
})
export class BookAppointmentModalComponent implements OnInit {
  // searchPtByName = new FormControl();
  patientDetailsList;
  filteredOptions: Observable<IPatient[]>;
  patientDetails: FormGroup;
  patientInfo;
  isPatientSelected = false;
  isBookSuccess = false;
  customStyle = {
    backgroundColor: "#faf1d4",
    //  border: "1px solid #7e7e7e",
    //  borderRadius: "50%",
    //  color: "#7e7e7e",
    //  cursor: "pointer"
  };
  role = sessionStorage.getItem('ROLE') ? sessionStorage.getItem('ROLE') : null;
  isPayLater = false;
  isDiscountChecked = false;
  netConsultationFees = 0;
  slotType: any;
  previousApptType: any;
  rescheduleDetails: any;
  doctorDetails: any;
  isOpenPayment = false;
  doctorId: any;
  termCondFlag:boolean;
  netConvenienceCharge = 0;

  constructor(
    public dialogRef: MatDialogRef<BookAppointmentModalComponent>,
    @Inject(MAT_DIALOG_DATA) public data: any,
    private appointmentService: AppointmentService,
    private patientService: PatientService,
    private datapassingService: DataPassingService,
    private fb: FormBuilder,
    private toastrMessage: ToastMessageService,
    private spinner: NgxSpinnerService,
    private router: Router,
    private activateRoute: ActivatedRoute,
    private dialog: MatDialog,
    private authService: AuthService
  ) {
    this.patientDetails = this.fb.group({
      searchPtByName: [null],
      discountAmount: [null]
    })
    this.netConsultationFees = data.fees + data.charge;
    this.netConvenienceCharge = data.charge;
    this.slotType = data.slotType;
    this.doctorId = data.drId
    this.patientDetails.get('discountAmount').disable();
  }

  ngOnInit(): void {
    this.patientDetails.get('searchPtByName').valueChanges.pipe(debounceTime(1000)).subscribe(value => {
      if (typeof value === 'string') {
        this.getPatientDetails(value);
      }
    })

    this.patientDetails.get('discountAmount').valueChanges.pipe(debounceTime(1000)).subscribe(value => {
      if (this.isDiscountChecked) {
        this.onChangeDiscount(value);
      }
    })
  }

  getPatientDetails(nameOrMob) {
    this.patientService.getPatientByName(nameOrMob).subscribe((result: any) => {
      if (result.status && result.response) {
        this.patientDetailsList = result ? result.response ? result.response : null : null;
        this.filterOptions();
      } else {
        // this.patientDetailsList = MockResponse.patientList.response;
        // this.filterOptions();
        this.toastrMessage.showErrorMsg(result.errors[0].message, "Error");
      }
    }, error => {
      // this.patientDetailsList = MockResponse.patientList.response;
      // this.filterOptions();
      this.toastrMessage.showErrorMsg(error.errors[0].message, "Error");
    })
  }

  filterOptions() {
    this.filteredOptions = this.patientDetails.get('searchPtByName').valueChanges.pipe(
      startWith(''),
      map(value => typeof value === 'string' ? value : value.name),
      map(name => name ? this._filter(name) : this.patientDetailsList.slice())
    );
  }

  displayFn(user): string {
    return user && user.ptFullName ? user.ptFullName : '';
  }

  private _filter(name): IPatient[] {
    const filterValue = name.toLowerCase();
    if (this.hasNumbers(filterValue)) {
      let mobNo: number = +filterValue;
      return this.patientDetailsList.filter(option => option.ptMobNo.indexOf(mobNo) === 0);
    } else {
      return this.patientDetailsList.filter(option => option.ptFullName.toLowerCase().indexOf(filterValue) === 0);
    }
  }

  hasNumbers(t) {
    var regex = /\d/g;
    return regex.test(t);
  }

  onSelectPtOption(event) {
    this.isPatientSelected = false;
    this.patientInfo = undefined
    setTimeout(() => {
      if (event.isUserInput) {
        this.patientInfo = event.source.value
        this.isPatientSelected = true;
      }
    }, 1000);
    return;
  }

  bookPatientAppointment() {
    if (!this.authService.isUserPatient()) {
      this.docPaymentApi();
    } else {
      let payload = {
        drRegID: this.doctorId,
        // drRegID: sessionStorage.getItem('USER_ID') ? sessionStorage.getItem('USER_ID') : null,
        ptRegID: this.patientInfo.ptUserId ? this.patientInfo.ptUserId : this.role !== 'DOCTOR' ? this.patientInfo.ptUserId ? this.patientInfo.ptUserId : null : null,
        transactionID: null,
        bookForSomeoneElse: 'n',
        patientName: this.patientInfo.ptFullName,
        patientEmail: this.patientInfo.ptEmail ? this.patientInfo.ptEmail : null,
        patientMNO: this.patientInfo.ptMobNo,
        consultType: this.slotType,

        appointmentDetails: {
          appointmentSlot: this.data.slotTime ? this.data.slotTime : null,
          appointmentDate: this.data.slotDate ? this.data.slotDate : null,
        }
      }
      this.paymentApi(payload);
    }

  }

  bookPatientAppointmentInclinic() {
    let payload = {
      drRegID: this.doctorId,
      ptRegID: this.patientInfo.ptUserId ? this.patientInfo.ptUserId : this.role !== 'DOCTOR' ? this.patientInfo.ptUserId ? this.patientInfo.ptUserId : null : null,
      transactionID: null,
      bookForSomeoneElse: 'n',
      patientName: this.patientInfo.ptFullName,
      patientEmail: this.patientInfo.ptEmail ? this.patientInfo.ptEmail : null,
      patientMNO: this.patientInfo.ptMobNo,
      consultType: this.slotType,
      appointmentDetails: {
        appointmentSlot: this.data.slotTime ? this.data.slotTime : null,
        appointmentDate: this.data.slotDate ? this.data.slotDate : null,
      }
    }
    this.paymentApi(payload);
  }

  docPaymentApi() {
    let drId = sessionStorage.getItem('USER_ID') ? sessionStorage.getItem('USER_ID') : null;
    let dummyPayload = {
      docUserID: drId === 'DOCTOR' ? drId : this.data.drId ? this.data.drId : this.data.drId,
      ptUserID: this.patientInfo.ptUserId ? this.patientInfo.ptUserId : this.role !== 'DOCTOR' ? this.patientInfo.ptUserId ? this.patientInfo.ptUserId : null : null,
      bookedFor: 'n',
      appointmentType:this.data.slotType,
      // appointmentType:this.data.slotType ? this.data.slotType : null;
      // appointmentDetails: {
      appointmentSlot: this.data.slotTime ? this.data.slotTime : null,
      appointmentDate: this.data.slotDate ? this.data.slotDate : null,
      // }
    }
    this.patientService.dummyPaymentApi(dummyPayload).subscribe(result => {
      let transactionID = result
      if (result) {
        if (transactionID && this.patientInfo.ptFullName && this.patientInfo.ptMobNo) {
          let payload = {
            drRegID: drId === 'DOCTOR' ? drId : this.data.drId ? this.data.drId : null,
            ptRegID: this.patientInfo.ptUserId ? this.patientInfo.ptUserId : this.role !== 'DOCTOR' ? this.patientInfo.ptUserId ? this.patientInfo.ptUserId : null : null,
            transactionID: transactionID ? transactionID : null,
            bookForSomeoneElse: 'n',
            patientName: this.patientInfo.ptFullName,
            patientEmail: this.patientInfo.ptEmail ? this.patientInfo.ptEmail : null,
            patientMNO: this.patientInfo.ptMobNo,
            consultType: this.slotType,
            appointmentDetails: {
              appointmentSlot: this.data.slotTime ? this.data.slotTime : null,
              appointmentDate: this.data.slotDate ? this.data.slotDate : null,
            }
          }


          let paymentDetails = {
            bookApptPayload: payload,
            // fees : this.data ? this.data.fees ? this.data.fees : 0 : 0,
            fees: this.netConsultationFees,
            charge :this.netConvenienceCharge,
            discount: this.patientDetails.get('discountAmount').value
          }

          // this is for payment
          this.datapassingService.paymentOptionData.next(paymentDetails)
          this.isPayLater = true;
        }

      } else {
        this.toastrMessage.showErrorMsg(ErrorSuccessMessage.TRANSACTIONID, 'Error');
      }
    }, error => {
      this.toastrMessage.showErrorMsg(ErrorSuccessMessage.APIFAILD, 'Error');
    })
  }



  paymentApi(payload) {
    let dummyPayload = {
      docUserID: payload.drRegID,
      ptUserID: payload.ptRegID,
      bookedFor: payload.bookForSomeoneElse,
      appointmentType:this.slotType,
      appointmentSlot: payload.appointmentDetails.appointmentSlot,
      appointmentDate: payload.appointmentDetails.appointmentDate,

    }
    this.patientService.dummyPaymentApi(dummyPayload).subscribe(result => {
      payload.transactionID = result
      if (result) {
        this.saveAppointment(payload);
      } else {
        this.toastrMessage.showErrorMsg(ErrorSuccessMessage.TRANSACTIONID, 'Error');
      }
    }, error => {
      this.toastrMessage.showErrorMsg(ErrorSuccessMessage.APIFAILD, 'Error');
    })
  }

  saveAppointment(payload1) {
    let payload = {
      drRegID: this.doctorId,
      ptRegID: payload1.ptRegID,
      transactionID: payload1.transactionID,
      bookForSomeoneElse: 'n',
      patientName: this.patientInfo.ptFullName,
      patientEmail: this.patientInfo.ptEmail ? this.patientInfo.ptEmail : null,
      patientMNO: this.patientInfo.ptMobNo,
      tncFlag:this.termCondFlag,
      consultType: this.slotType,
      appointmentDetails: {
        appointmentSlot: this.data.slotTime ? this.data.slotTime : null,
        appointmentDate: this.data.slotDate ? this.data.slotDate : null,
      }
    }
    this.spinner.show();
    // && this.patientInfo.ptEmail
    // || (this.patientInfo.ptFullName && this.patientInfo.ptMobNo && this.data.slotType == 'In-Clinic')
    // if((payload.transactionID &&  this.patientInfo.ptFullName && this.patientInfo.ptMobNo) ) {
    let paymentDetails = {
      // tansactionID : transactionID,
      // apptID : '',
      bookApptPayload: payload,
      fees: this.doctorDetails ? this.doctorDetails.consultFee ? this.doctorDetails.consultFee : 0 : 0,
      charge: this.doctorDetails ? this.doctorDetails.convenienceCharge ? this.doctorDetails.convenienceCharge : 0 : 0,
      discount :this.patientDetails.get('discountAmount').value
    }
    this.previousApptType = this.slotType;
    if (this.slotType === 'Teleconsultation') {
      this.datapassingService.paymentDetails.next(paymentDetails);
      this.spinner.hide();
      this.isOpenPayment = true;
    } 
      // else if ((this.slotType && this.previousApptType) == 'Teleconsultation') {
      //   console.log("enter in else if");
      //     this.saveAppointment(payload);
      // }
       else {
      this.patientService.saveAppointmentDetails(payload).subscribe(result => {
        if (result && result.response && result.status) {
          this.spinner.hide();
          // this.getSlotByDoctor();
          this.dialogRef.close({ data: result.status });
          if (this.role == 'CALLCENTRE') {
            this.router.navigate(['../book-appointment-dashboard'], { relativeTo: this.activateRoute });
          } else {
            this.router.navigate(['/appointments']);
          }
          this.toastrMessage.showSuccessMsg(result.response.info, "Success");
        } else if (result && result.errors && !result.status) {
          this.spinner.hide();
          this.toastrMessage.showErrorMsg(result.errors[0].message, 'Error');
        }
      }, error => {
        this.spinner.hide();
        this.toastrMessage.showErrorMsg(error.errors[0].message, 'Error');
      })
    }
  
    // }else {
    //   this.spinner.hide();
    //   this.toastrMessage.showWarningMsg(ErrorSuccessMessage.PATIENTDETAILS, 'Warning');
    // }
  }


  //   rescheduleAppt(){
  //     this.previousApptType = this.rescheduleDetails.slotType;
  //     if(this.slotType === "In-Clinic" || this.slotType === null){
  //           this.rescedule();
  //     }
  //     else{
  //      if(this.previousApptType === "Teleconsultation" || this.previousApptType === null) {
  //        this.rescedule();
  //      }

  //       this.cancelAppointment();

  //     } 

  //    //  || this.previousApptType === null
  // }


  // rescedule(){
  //   let data = {
  //     // drRegID: this.patientDetails.doctorUserId, 
  //     // ptRegID: this.patientDetails.patientRegId,
  //     appID: this.rescheduleDetails.appointmentID,
  //     // userRole: this.authService.getUserRole(),
  //     appointmentDetails: {
  //       reschduleappSlot:   this.data.slotTime ? this.data.slotTime : null,
  //       reschduleappDate: this.data.slotDate ? this.data.slotDate : null,
  //       slotType:this.slotType ? this.slotType : null,

  //     }
  //   }
  //   this.appointmentService.rescheduleAppt(data).subscribe((result:any) => {
  //     if (result.response != null) {
  //       this.toastrMessage.showSuccessMsg(result.response.info, "Congratulation");
  //         if(this.authService.isUserPatient()){
  //           this.router.navigate(['patient-dashboard']);
  //         } else {
  //           this.router.navigate(['appointments']);
  //         }
  //       } else if (result.errors) {
  //       this.toastrMessage.showInfoMsg(result.errors[0].message, "Information");
  //       }
  //     }, error => {
  //       this.toastrMessage.showErrorMsg("Error occured at the backend!", "Error");
  //     });
  // }


  // cancelAppointment(){


  //   let data = {
  //     apptId: this.rescheduleDetails.appointmentID
  //   }
  //   console.log(data);
  // this.appointmentService.cancelAppointment(data).subscribe((resp:any) => {

  //   if(resp){

  //   }
  // });
  // }

  openPaymentDialog(payload) {
    const dialogRef = this.dialog.open(PaymentOptionModalComponent, {
      disableClose: true,
      width: '500Px',
      data: payload
    });


    dialogRef.afterClosed().subscribe(result => {
      if (result.data) {
        this.dialogRef.close({ data: true });
        // this.saveAppointment(payload.bookApptPayload);
      } else {
        this.dialogRef.close({ data: true });
      }
    });
  }

  onClickClose() {
    this.dialogRef.close();
  }

  onClickDiscount(checked: boolean) {
    this.isDiscountChecked = checked
    if (checked) {
      this.patientDetails.get('discountAmount').enable();
      this.patientDetails.get('discountAmount').setValidators([Validators.required]);
      this.patientDetails.get("discountAmount").setErrors({ 'required': true });
      this.patientDetails.get('discountAmount').updateValueAndValidity();
    } else {
      this.netConsultationFees = this.data.fees + this.data.charge;
      this.patientDetails.get('discountAmount').disable();
      this.patientDetails.get('discountAmount').setValue(null);
      this.patientDetails.get('discountAmount').setValidators(null);
      this.patientDetails.get('discountAmount').updateValueAndValidity();
    }
  }

  onChangeDiscount(value) {
    let val = value
    if (value && this.data && this.data.fees && val < this.data.fees && val >= 0) {
      console.log(this.data.fees , value,val, "jgjgj");
      this.netConsultationFees = this.data.fees - value + this.data.charge;
    } else {
      if (value > this.data.fees) {
        this.patientDetails.controls.discountAmount.invalid
        this.patientDetails.get('discountAmount').updateValueAndValidity();
        this.patientDetails.get('discountAmount').setValue(null);
        this.netConsultationFees = this.data.fees + this.data.charge;
      } else {
        this.patientDetails.controls.discountAmount.invalid
        this.patientDetails.get('discountAmount').updateValueAndValidity();
        this.patientDetails.get('discountAmount').setValue(null);
        this.netConsultationFees = this.data.fees + this.data.charge ;
      }
    }
  }

}

