import { Component } from '@angular/core';
import { ActivatedRoute, Router, ActivatedRouteSnapshot } from '@angular/router';
import { ConsultationStep } from 'src/app/shared/commonBuildBlocks/enum/consultation-steps.enum';
import { RoutesConstant } from 'src/app/shared/commonBuildBlocks/enum/routes.enum';
import { ConsultationService } from 'src/app/shared/commonBuildBlocks/services/ConsultationServices/consultation.service';

@Component({
  selector: 'app-consultation-initiation',
  templateUrl: './consultation-initiation.component.html',
  styleUrls: ['./consultation-initiation.component.scss'],
})
export class ConsultationInitiationComponent {

  constructor(
    private activatedRoute: ActivatedRoute,
    private router: Router,
    private consultationService: ConsultationService
  ) { }

  ngOnDestroy() {
    localStorage.removeItem("selectedSymptoms");
    localStorage.removeItem("selectedAdvice");
    localStorage.removeItem("selectedDiagnosis");
    localStorage.removeItem("selectedMedicines");
  }
  
  tabs = [
    { tabName: 'Details', route: RoutesConstant.PRESCRIPTIONDETAILS, type: ConsultationStep.PRESCRIPTIONDETAILS },
    { tabName: 'Prescription', route: RoutesConstant.PRESCRIPTION, type: ConsultationStep.PRESCRIPTION }

  ]

  /**
   * Used to store current tab.
   */
  currentTab = ConsultationStep.PRESCRIPTIONDETAILS;
  // currentTab = ConsultationSteps.CHIEF_COMPLAINTS;

  /**
   * Used to store available tabs.
   */
  availableTabs = ConsultationStep;

  /**
   * Used to check tab is active or not.
   * @param type Used to store type of tab.
   */
  isTabActivated(type: ConsultationStep) {
    this.currentTab = (this.activatedRoute.children as ActivatedRoute[])[0] ? (this.activatedRoute.children as ActivatedRoute[])[0].snapshot ? (this.activatedRoute.children as ActivatedRoute[])[0].snapshot?.data?.type : 0 : 0;
    return (this.activatedRoute.children as ActivatedRoute[])[0] ? (this.activatedRoute.children as ActivatedRoute[])[0].snapshot ? (this.activatedRoute.children as ActivatedRoute[])[0].snapshot?.data?.type === type : 0 : 0;
  }

  /**
   * Used to change tab.
   * @param dir Used to store direcion.
   */
  changeTab(dir: 'prev' | 'next') {
    const index = this.tabs.findIndex(x => this.currentTab === x.type);
    if (index == -1 || !dir) {
      return;
    }

    if (dir === 'prev' && this.tabs[index - 1]) {
      this.consultationService.currentTab.next(this.tabs[index - 1].route)
      this.router.navigate([RoutesConstant.CONSULTATION, this.tabs[index - 1].route], { preserveQueryParams: true });
      return;
    }

    if (dir === 'next' && this.tabs[index + 1]) {
      this.consultationService.currentTab.next(this.tabs[index + 1].route)
      this.router.navigate([RoutesConstant.CONSULTATION, this.tabs[index + 1].route], { preserveQueryParams: true });
      return;
    }
  }

  tabChange(route) {
    this.consultationService.currentTab.next(route);
  }
}
