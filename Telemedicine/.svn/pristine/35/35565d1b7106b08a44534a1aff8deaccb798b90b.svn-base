import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { NgbModal } from '@ng-bootstrap/ng-bootstrap';
import { NgxSpinnerService } from 'ngx-spinner';
import { UserData } from 'src/app/shared/commonBuildBlocks/model/system-user-data.model';
import { CheckerService } from 'src/app/shared/commonBuildBlocks/services/checkerServices/checker.service';
import { DocumentService } from 'src/app/shared/commonBuildBlocks/services/documentServices/document.service';
import { ToastMessageService } from 'src/app/shared/commonBuildBlocks/toaster/toast-message.service';

@Component({
    selector: 'app-checker-dashboard',
    templateUrl: './checker-dashboard.component.html',
    styleUrls: ['./checker-dashboard.component.scss']
})
export class CheckerDashboardComponent implements OnInit {
    doctorData: any;
    q: string;
    dataSource: any = null;
    displayedColumns: any;
    planType:any;
    reasonGroup: FormGroup;
    typeGroup: FormGroup;
    extensionArray = ['png', 'jpeg', 'jpg', 'bmp'];
    modelRef: any;
    constructor(
        public checkerService: CheckerService,
        public fb: FormBuilder,
        public documentService: DocumentService,
        public modelService: NgbModal,
        private spinner: NgxSpinnerService,
        private toastMessage: ToastMessageService,
    ) {
        this.displayedColumns = ['Document Name', 'Status', 'Visibility', 'Upgrade'];
        this.reasonGroup = this.fb.group({
            reason: ['', [Validators.required, Validators.maxLength(200)]],
            userId: [''],
        })
        this.typeGroup = this.fb.group({
            isIpanorMarsha: ['I'],
        })

    }

    ngOnInit(): void {
        this.getDoctorsList();
        // this.typeGroup.controls['isIpanprMarsha'].setValue('I');
    }
    ngOnDestroy() {
        if (this.modelRef) {
            this.modelRef.close();
        }
    }
    getDoctorsList() {
        this.spinner.show();
        this.checkerService.getDoctorList().subscribe((resp: any) => {
            this.doctorData = [];
            this.spinner.hide();
            if (resp.response) {
                let data = new UserData(resp.response);
                this.doctorData = data.details;
            } else if (resp.errors && resp.errors.length) {
                this.doctorData = [];
            }
        }, error => {
            this.spinner.hide();
        })
    }
    refresh(event) {
        this.doctorData = null
        this.getDoctorsList();
    }
    getDoctorDetails(id, i, originaIndex) {
        this.checkerService.getDoctorProfile(id).subscribe(result => {
            if (result.response) {
                let dataSource: any = result.response;
                this.doctorData[originaIndex] = Object.assign(this.doctorData[originaIndex], { 'dataSource': dataSource });
                this.planType= this.doctorData[originaIndex].isIpanorMarsha;

            } else if (result.errors) {}
        }, error => {
        })
    }
    verifyDoc(response, data) {
        if (!this.reasonGroup.valid || !this.typeGroup.valid) {
            this.reasonGroup.get('reason').markAsTouched();
            this.typeGroup.get('isIpanorMarsha').markAsTouched();

        }
        let payload = {
            request: {
                regDocUserName: data.drUserID,
                verificationStatusFlag: response,
                reason: this.reasonGroup.get('reason').value,
                isIpanorMarsha: this.typeGroup.get('isIpanorMarsha').value
            }

        }
        if (this.typeGroup.valid) {
            this.checkerService.verifyDoctor(payload).subscribe((resp: any) => {
                if (resp.status) {
                    this.getDoctorsList();
                    if (this.modelRef) {
                        this.modelRef.close();
                    }
                    this.reasonGroup.reset();
                    this.toastMessage.showSuccessMsg(resp.response && resp.response.message ? resp.response.message : "sucess", "Sucess");
                } else if (resp.errors) {
                    if (this.modelRef) {
                        this.modelRef.close();
                    }
                    this.toastMessage.showErrorMsg(resp.errors[0].message ? resp.errors[0].message : 'Internal Server Error', "Error");
                }
            }, error => {
            })
        }
    }
    download(obj, drId) {
        let data = {
            api: "downoad document",
            request: {
                ddtDocsPath: obj.ddtDocsPath,
                ddtDocsType: obj.ddtDocsType,
                drdUserId: drId,
            },
            mimeType: "application/json"
        }

        this.checkerService.downloadDoc(data).subscribe((resp: any) => {
            if (resp) {
                if (resp.status) {
                    this.documentService.downloadFileToBrowser(resp.response, resp.mimeType);
                } else {
                    this.toastMessage.showErrorMsg(resp.errors[0].message ? resp.errors[0].message : 'Internal Server Error', "Error");
                }
            }
        })
    }
    downloadAndView(obj, drId) {
        let data = {
            api: "downoad document",
            request: {
                ddtDocsPath: obj.ddtDocsPath,
                ddtDocsType: obj.ddtDocsType,
                drdUserId: drId,
            },
            mimeType: "application/json"
        }
        this.checkerService.downloadDoc(data).subscribe((resp: any) => {
            if (resp) {
                if (resp.status) {
                    this.documentService.downloadFileAndView(resp.response, resp.mimeType);
                } else {
                    this.toastMessage.showErrorMsg(resp.errors[0].message ? resp.errors[0].message : 'Internal Server Error', "Error");
                }
            }
        })
    }
    notVerify(content, data) {
        this.reasonGroup.reset();
        this.reasonGroup.get('userId').patchValue(data.drUserID);
        this.modelRef = this.modelService.open(content);
    }
    rejectedVerification(response) {
        let data = {
            drUserID: this.reasonGroup.get('userId').value,
        }
        if (!this.reasonGroup.valid) {
            this.reasonGroup.get('reason').markAsTouched();
            return;
        }
        this.verifyDoc(response, data);
    }
}
