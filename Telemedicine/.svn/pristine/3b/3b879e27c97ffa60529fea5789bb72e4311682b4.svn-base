package com.nsdl.ndhm.service.impl;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.gson.Gson;
import com.nsdl.ndhm.dto.*;
import com.nsdl.ndhm.dto.link.PatientDTO;
import com.nsdl.ndhm.entity.AddContextEntity;
import com.nsdl.ndhm.entity.DisLinkInitEntity;
import com.nsdl.ndhm.entity.DisLinkedCareContextEntity;
import com.nsdl.ndhm.logger.LoggingClientInfo;
import com.nsdl.ndhm.repository.AddContextRepository;
import com.nsdl.ndhm.repository.CareContextRepository;
import com.nsdl.ndhm.repository.DisLinkInitRepository;
import com.nsdl.ndhm.repository.DisLinkedCareContextRepository;
import com.nsdl.ndhm.service.LinkCallbackService;
import com.nsdl.ndhm.utility.CommonHeadersUtil;
import com.nsdl.ndhm.utility.GenerateOTPUtil;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.net.URI;
import java.text.SimpleDateFormat;
import java.util.*;

@Service
@LoggingClientInfo
public class LinkCallbackServiceImpl implements LinkCallbackService {
	private static final Logger logger = LoggerFactory.getLogger(LinkCallbackServiceImpl.class);

	@Autowired
	AddContextRepository addContextRepository;

	@Autowired
	CommonHeadersUtil commonHeadersUtil;

	@Autowired
	RestTemplate restTemplate;

	@Autowired
	CareContextRepository careContextRepository;

	@Autowired
	DisLinkInitRepository disLinkInitRepository;

	@Autowired
	DisLinkedCareContextRepository disLinkedCareContextRepository;

	@Autowired
	GenerateOTPUtil generateOTPUtil;

	@Value("${ndhm.discover.oninit}")
	String oninit;

	@Value("${ndhm.discover.linkOnConfirm}")
	String linkOnConfirm;

	private static final String DATE_FORMAT = "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'";

	@Override
	public void updateOnAddContext(OnAddContextResponseDTO addContextResponseDTO) {
		logger.info("Update add context In Service Starts");
		ObjectMapper mapper = new ObjectMapper();

		String json = "";
		try {
			json = mapper.writeValueAsString(addContextResponseDTO);
		} catch (JsonProcessingException e) {
			logger.error("Error in updateInit {} ", e);
		}
		AddContextEntity authInitEntity = AddContextEntity.builder()
				.requestId(addContextResponseDTO.getResp().getRequestId())
				.timestamp(addContextResponseDTO.getTimestamp()).status(true).response(json).build();
		try {
			addContextRepository.save(authInitEntity);
		} catch (Exception e) {
			logger.error("Error in Update add context {} ", e);

		}
		logger.info("Update add context In Service ends");

	}

	private DisLinkOnInitResponseDTO prepareDummyData(DisLinkingInitReqDTO disLinkingInitReqDTO) {

		SimpleDateFormat format1 = new SimpleDateFormat(DATE_FORMAT, Locale.US);
		format1.setTimeZone(TimeZone.getTimeZone("UTC"));
		return DisLinkOnInitResponseDTO.builder().requestId(UUID.randomUUID().toString())
				.timestamp(format1.format(new Date())).transactionId(disLinkingInitReqDTO.getTransactionId())
				.resp(RespDTO.builder().requestId(disLinkingInitReqDTO.getRequestId()).build())
				.link(DisLinkLinkDTO.builder().authenticationType("DIRECT")
						.referenceNumber("LINK_REF_55011")
						.meta(DisLinkMetaDto.builder().communicationMedium("MOBILE").communicationHint("MOBILE OTP")
								.communicationExpiry(
										new Date(Calendar.getInstance().getTimeInMillis() + (2 * 60 * 1000)).toString())
								.build())
						.build())
				.build();
	}

	/*
	 * discover and link init method
	 */
	public ResponseEntity<String> discoverInitDemo(DisLinkingInitReqDTO disLinkingInitReqDTO) {
		logger.info("Request Receives for Discover init Starts ");
		String url = oninit;
		ResponseEntity<String> result = null;
		URI uri;

		try {
			uri = new URI(url);
			String encryptedString = new Gson().toJson(prepareDummyData(disLinkingInitReqDTO));

			HttpEntity<String> requestEntity = new HttpEntity<>(encryptedString,
					commonHeadersUtil.getHeadersWithXCmIdFromServer());

			result = restTemplate.exchange(uri, HttpMethod.POST, requestEntity, String.class);
			logger.info("discover Response with header {}", requestEntity);
			logger.info("result {}", result);
		} catch (Exception e) {
			logger.info("Error in On-discover {} ", e);
		}
		logger.info("Request Receives for Discover init ends ");
		return result;
	}

	private DisLinkInitEntity generateLinkRefNo(DisLinkingInitReqDTO disLinkingInitReqDTO) {
		SimpleDateFormat format1 = new SimpleDateFormat(DATE_FORMAT, Locale.US);
		format1.setTimeZone(TimeZone.getTimeZone("UTC"));
		DisLinkInitEntity disLinkInitEntity = DisLinkInitEntity.builder().authModes("DIRECT")
				.patientReferenceNo(disLinkingInitReqDTO.getPatient().getReferenceNumber())
				.patientId(disLinkingInitReqDTO.getPatient().getId())
				.commnExpire(format1.format(new Date(Calendar.getInstance().getTimeInMillis() + (5 * 60 * 1000))))
				.commnMedium("MOBILE").otp(generateOTPUtil.otp(6)).requestId(disLinkingInitReqDTO.getRequestId())
				.timestamp(disLinkingInitReqDTO.getTimestamp()).transactionId(disLinkingInitReqDTO.getTransactionId())
				.build();

		List<DisLinkedCareContextEntity> disLinkedCareContextEntityList = new ArrayList<>();
		for (DisLinkCareContextDTO s : disLinkingInitReqDTO.getPatient().getCareContexts()) {
			disLinkedCareContextEntityList.add(DisLinkedCareContextEntity.builder()
					.careContextReferenceNo(s.getReferenceNumber()).disLinkInitEntity(disLinkInitEntity).build());
		}
		disLinkInitEntity = disLinkInitRepository.save(disLinkInitEntity);
		disLinkedCareContextRepository.saveAll(disLinkedCareContextEntityList);
		return disLinkInitEntity;
	}

	/*
	 * discover and link init method
	 */
	public ResponseEntity<String> discoverInit(DisLinkingInitReqDTO disLinkingInitReqDTO) {
		logger.info("Request Receives for Discover init Starts ");
		String url = oninit;
		ResponseEntity<String> result = null;
		URI uri;
		SimpleDateFormat format1 = new SimpleDateFormat(DATE_FORMAT, Locale.US);
		format1.setTimeZone(TimeZone.getTimeZone("UTC"));
		DisLinkInitEntity disLinkInitEntity = null;
		try {
			disLinkInitEntity = generateLinkRefNo(disLinkingInitReqDTO);
		} catch (Exception e) {
			disLinkInitEntity = null;
			logger.error("Error While fetching details from Database {}", e);
		}

		DisLinkOnInitResponseDTO disLinkOnInitResponseDTO = DisLinkOnInitResponseDTO.builder()
				.requestId(UUID.randomUUID().toString()).timestamp(format1.format(new Date()))
				.transactionId(disLinkingInitReqDTO.getTransactionId())
				.resp(RespDTO.builder().requestId(disLinkingInitReqDTO.getRequestId()).build()).build();

		if (disLinkInitEntity != null) {
			DisLinkMetaDto disLinkMetaDto = DisLinkMetaDto.builder()
					.communicationExpiry(disLinkInitEntity.getCommnExpire())
					.communicationMedium(disLinkInitEntity.getCommnMedium()).build();

			disLinkOnInitResponseDTO.setLink(DisLinkLinkDTO.builder().authenticationType("DIRECT")
					.referenceNumber(disLinkInitEntity.getLinkReferenceNo()).meta(disLinkMetaDto).build());
			try {
				uri = new URI(url);
				String encryptedString = new Gson().toJson(disLinkOnInitResponseDTO);
				logger.info("encryptedString {} ", encryptedString);
				HttpEntity<String> requestEntity = new HttpEntity<>(encryptedString,
						commonHeadersUtil.getHeadersWithXCmIdFromServer());
				result = restTemplate.exchange(uri, HttpMethod.POST, requestEntity, String.class);
				logger.info("discover Response with header {}", requestEntity);
				logger.info("result {}", result);
				sendOTP(disLinkInitEntity);
			} catch (Exception e) {
				logger.info("Error in On-discover {} ", e);
			}
		} else {
			disLinkOnInitResponseDTO
					.setError(ErrorDTO.builder().code("1000").message("Please Provide Helath Id").build());
			try {
				uri = new URI(url);
				String encryptedString = new Gson().toJson(disLinkOnInitResponseDTO);
				HttpEntity<String> requestEntity = new HttpEntity<>(encryptedString,
						commonHeadersUtil.getHeadersWithXCmIdFromServer());
				result = restTemplate.exchange(uri, HttpMethod.POST, requestEntity, String.class);
			} catch (Exception e1) {
				logger.info("Error in on-discover health id missing  {} ", e1);
				result = new ResponseEntity<>(HttpStatus.EXPECTATION_FAILED);
			}
		}
		return result;
	}

	private void sendOTP(DisLinkInitEntity disLinkInitEntity) {
		String mobileNo = careContextRepository.getMobileNoByPatientId(disLinkInitEntity.getPatientId());
		logger.info("mobileNo " + mobileNo + "  --" + disLinkInitEntity.getOtp());

	}

	/*
	 * Link on-confirm method
	 */
	@Override
	public ResponseEntity<String> linkOnConfirm(LinkConfirmDTO linkConfirmDTO) {
		logger.info("LinkOnConfirm In Service Starts");

		SimpleDateFormat formatter = new SimpleDateFormat(DATE_FORMAT, Locale.US);
		formatter.setTimeZone(TimeZone.getTimeZone("UTC"));
		String uuid = UUID.randomUUID().toString();

		String url = linkOnConfirm;
		ResponseEntity<String> result = null;
		URI uri;

		OnLinkConfirmDTO onLinkConfirmDTO = OnLinkConfirmDTO.builder().requestId(uuid).timestamp(formatter.format(new Date()))
				.resp(RespDTO.builder().requestId(linkConfirmDTO.getRequestId()).build()).build();

		ConfirmationDTO confirmationDTO = linkConfirmDTO.getConfirmation();

		if (confirmationDTO != null && confirmationDTO.getLinkRefNumber() != null
				&& confirmationDTO.getToken() != null) {
			  onLinkConfirmDTO.setPatient(PatientDTO.builder()
					  .referenceNumber("PAT_50_501")
					  .display("Rahul SalaMpure")
					  .careContexts(Arrays.asList(CareContextDTO.builder().referenceNumber("CARE_CNTX_55009")
							  .display("09-02-2022 Visit").build())).build());

		} else {
			onLinkConfirmDTO.setError(ErrorDTO.builder().code("1000").message("linkRefNumber is not received").build());
		}

		try {
			uri = new URI(url);
			String encryptedString = new Gson().toJson(onLinkConfirmDTO);
			HttpEntity<String> requestEntity = new HttpEntity<>(encryptedString,
					commonHeadersUtil.getHeadersWithXCmIdFromServer());
			result = restTemplate.exchange(uri, HttpMethod.POST, requestEntity, String.class);
		} catch (Exception e) {
			logger.error("Error is in LinkOnConfirm {}", e.getMessage());
		}
		logger.info("LinkOnConfirm In Service ends");
		return result;
	}
}
