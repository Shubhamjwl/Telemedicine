package com.nsdl.telemedicine.patient.controller;

import java.util.List;

import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.nsdl.telemedicine.patient.constant.AuthConstant;
import com.nsdl.telemedicine.patient.dto.AppointmentDetailsResponseDTO;
import com.nsdl.telemedicine.patient.dto.AppontmentDetailsRequestDTO;
import com.nsdl.telemedicine.patient.dto.BulkPatientRegistrationDTO;
import com.nsdl.telemedicine.patient.dto.CareContextResponse;
import com.nsdl.telemedicine.patient.dto.CareContextResponseDto;
import com.nsdl.telemedicine.patient.dto.HealthIdDetailsToTelemedicineDTO;
import com.nsdl.telemedicine.patient.dto.PatientDetailsDTO;
import com.nsdl.telemedicine.patient.dto.PatientRefRequestDto;
import com.nsdl.telemedicine.patient.dto.PatientRefResponseDto;
import com.nsdl.telemedicine.patient.dto.PatientRegistrationDto;
import com.nsdl.telemedicine.patient.dto.PatientResponseDto;
import com.nsdl.telemedicine.patient.dto.ReportRequestDto;
import com.nsdl.telemedicine.patient.dto.RequestWrapper;
import com.nsdl.telemedicine.patient.dto.ResponseWrapper;
import com.nsdl.telemedicine.patient.dto.TokenDetailsDTO;
import com.nsdl.telemedicine.patient.loggers.PatientLoggingClientInfo;
import com.nsdl.telemedicine.patient.service.PatientRegistrationService;
import com.nsdl.telemedicine.patient.utility.AuthUtil;


@RestController("patientModiController")
@RequestMapping("/patientRegistration")
//@CrossOrigin("*")
@PatientLoggingClientInfo
public class PatientRegistrationController {

	private static final Logger logger = LoggerFactory.getLogger(PatientRegistrationController.class);

	@Autowired
	private PatientRegistrationService patientRegistrationService; 

	@PostMapping(path = "/registration" , consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<ResponseWrapper<PatientResponseDto>> savePatientDetails( @Valid
			@RequestBody RequestWrapper<PatientRegistrationDto> patientRegistrationDto)
	{
		logger.info("Registration-Patient Request Received");
		return ResponseEntity.status(HttpStatus.OK).body(patientRegistrationService.savePatientDetails(patientRegistrationDto));
	}

	//Changes from Get to Post request
	@PostMapping(path = "/getpatientdetails", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<ResponseWrapper<PatientRegistrationDto>> getPatientDetailsFromIPAN() {

		logger.info("Get Patient Details Request Received");
		return ResponseEntity.status(HttpStatus.OK).body(patientRegistrationService.getPatientDetailsFromIPAN());
	}
	
	/**
	 * @param appontmentDetailsRequest
	 * @param res
	 * @return
	 * Added by girishk to search completed appointment using different search criteria.
	 */
	@PostMapping(value = "/searchCompletedAppointmentsForPatient", produces = MediaType.APPLICATION_JSON_VALUE) 
	public ResponseEntity<ResponseWrapper<List<AppointmentDetailsResponseDTO>>> searchCompletedAppointmentsForPatient(@RequestBody RequestWrapper<AppontmentDetailsRequestDTO> appontmentDetailsRequest,HttpServletResponse res) 
	{ 
		logger.info("Request Received to search completed appointments for patient.");
		return ResponseEntity.status(HttpStatus.OK).body(patientRegistrationService.searchCompletedAppointmentsForPatient(appontmentDetailsRequest));
	}
	
	/**
	 * @param appontmentDetailsRequest
	 * @param res
	 * @return
	 * Added by SayaliA to search completed appointment of latest 10.
	 */
	@PostMapping(value = "/listOfCompletedAppointmentsForPatient", produces = MediaType.APPLICATION_JSON_VALUE) 
	public ResponseEntity<ResponseWrapper<List<AppointmentDetailsResponseDTO>>> listOfCompletedAppointmentsForPatient() 
	{ 
		logger.info("Request Received to search completed appointments for patient.");
		return ResponseEntity.status(HttpStatus.OK).body(patientRegistrationService.listOfCompletedAppointmentsForPatient());
	}
	
	/**
	 * @param bulkRegistrationRequest
	 * @return
	 * Method added by girishk to register patients in bulk.
	 * @throws Exception 
	 */
	@PostMapping(value = "/bulkPatientRegistration", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<ResponseWrapper<?>> bulkPatientRegistration(@RequestBody RequestWrapper<BulkPatientRegistrationDTO> bulkRegistrationRequest) throws Exception {
		logger.info("Request Received for bulk registration of patients.");
		return ResponseEntity.status(HttpStatus.OK).body(patientRegistrationService.bulkPatientRegistration(bulkRegistrationRequest));
	}
	/**
	 * @param appontmentDetailsRequest
	 * @param res
	 * @return
	 * Added by SayaliA to register patient by doctor or scribe
	 */
	@PostMapping(path = "/patientRegistartionByScribeOrDoctor" , consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<ResponseWrapper<PatientResponseDto>> saveRegistrationDetails( @Valid
			@RequestBody RequestWrapper<PatientDetailsDTO> patientDetailsDTO)
	{
		logger.info("Registration of Patient Request by Doctor or Scribe Received");
		return ResponseEntity.status(HttpStatus.OK).body(patientRegistrationService.saveRegistrationDetails(patientDetailsDTO));
	}
	
	/**
	 * Added by SayaliA to register patient by doctor on link shared by doctor for single calender(no token required ,patient will get register automatically by backend )
	 */
	@PostMapping(path = "/patientRegistartionByExternalLink" , consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<ResponseWrapper<PatientResponseDto>> savePatientRegistrationDetails( @Valid
			@RequestBody RequestWrapper<PatientDetailsDTO> patientDetailsDTO)
	{
		logger.info("Registration of Patient with link shared by doctor for single calender");
		return ResponseEntity.status(HttpStatus.OK).body(patientRegistrationService.savePatientRegistrationDetails(patientDetailsDTO));
	}
	
	/**
	 * Added by SayaliA to register patient by doctor on link shared by doctor(no token required ,patient will get register automatically by backend )
	 */
	@PostMapping(path = "/registerPatientLink" , produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<ResponseWrapper<PatientResponseDto>> savePatientRegDetailsByLink( @Valid
			@RequestBody RequestWrapper<TokenDetailsDTO> patientDetailsDTO)
	{
		logger.info("Registration of Patient with link shared by doctor");
		return ResponseEntity.status(HttpStatus.OK).body(patientRegistrationService.savePatientRegistrationLinkDetails(patientDetailsDTO));
	}
	/*
	 * Added by sayaliA for NDHM Integration related APIS
	 */
	@PostMapping(path = "/receiveHealthIdDetails", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<ResponseWrapper<PatientResponseDto>> updateHealthIDDetails(@Valid @RequestBody RequestWrapper<HealthIdDetailsToTelemedicineDTO> healthIdDetailsDTO) {
		logger.info("Receiving healthID Details on telemedicine");
		System.out.println("healthIdDetailsDTO " + healthIdDetailsDTO);
		return ResponseEntity.status(HttpStatus.OK).body(patientRegistrationService.updateHealthIDDetails(healthIdDetailsDTO));
	}
	
	
	@PostMapping(path = "/getPatientRefByPatientId", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<ResponseWrapper<PatientRefResponseDto>> getPatientRefByPatientId(@Valid @RequestBody RequestWrapper<PatientRefRequestDto> patientRefRequestDto) {
		logger.info("Receiving healthID Details on telemedicine");
		System.out.println("PatientRefRequestDto " + patientRefRequestDto);
		return ResponseEntity.status(HttpStatus.OK).body(patientRegistrationService.getPatientRefByPatientId(patientRefRequestDto));
	}
	
	

	@PostMapping(path = "/getCareContextDetails", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseWrapper<List<CareContextResponseDto>> getCareContextDetails(@Valid @RequestBody RequestWrapper<PatientRefRequestDto> getCareContextByHealthId) {
		logger.info("Receiving healthID Details on telemedicine");
		ResponseWrapper<List<CareContextResponseDto>> responseDTO=null;
		try {
			responseDTO= patientRegistrationService.getCareContextDtls(getCareContextByHealthId);
		}catch(Exception e) {
			logger.error("Error occured while processing request :", e);
			e.printStackTrace();
		}	
		return responseDTO;
	}
	
	

	@PostMapping(path = "/getReportsByCareContextIds", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<ResponseWrapper<List<CareContextResponse>>> getReportsByCareContextIds(@Valid @RequestBody RequestWrapper<ReportRequestDto> reportRequestDtls) {
		logger.info("Receiving CareContextIds Details on telemedicine");
		ResponseWrapper<List<CareContextResponse>> responseDtls=null;
		try {
			responseDtls=patientRegistrationService.getReportsByCareContextIds(reportRequestDtls); 
			
		}catch(Exception e) {
			logger.error("Error occured while processing request :", e);
			e.printStackTrace();}
		
		System.out.println("getReportsByCareContextIds " + reportRequestDtls);
		return ResponseEntity.status(HttpStatus.OK).body(responseDtls);
	}
	
	
	
	
}
