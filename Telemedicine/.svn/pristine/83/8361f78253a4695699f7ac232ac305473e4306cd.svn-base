package com.nsdl.ndhm.controller;

import java.time.ZonedDateTime;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.scheduling.annotation.Async;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.nsdl.ndhm.dto.DiscoverRequestDTO;
import com.nsdl.ndhm.service.DiscoveryAndLinkingService;

@RestController
@CrossOrigin
@RequestMapping("/v0.5/care-contexts/")
public class DiscoveryAndLinkingController {

	private static final Logger logger = LoggerFactory.getLogger(DiscoveryAndLinkingController.class);

	@Autowired
	DiscoveryAndLinkingService discoveryAndLinkingService;

	/* for discover */
	@Async
	@PostMapping(value = "discover1", consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<Map<String, String>> discover(@RequestHeader Map<String, String> headers,
			@RequestBody DiscoverRequestDTO discoverRequestDTO) {

		logger.info("Request Received For Discovery Starts", ZonedDateTime.now());
		try {
			discoveryAndLinkingService.discover(headers, discoverRequestDTO);
		} catch (Exception e) {
			logger.error("Error in discover {} ", e);
		}
		logger.info("Request Received For Discovery Ends", ZonedDateTime.now());
		return ResponseEntity.status(HttpStatus.OK).build();
	}

	@Async("asyncExecutor")
	@PostMapping(value = "discover", consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
	public CompletableFuture<ResponseEntity<String>> getEmployeeAddress(@RequestHeader Map<String, String> headers,
			@RequestBody DiscoverRequestDTO discoverRequestDTO)   {
		logger.info("Request Received For Discovery Starts {}", ZonedDateTime.now());
		discoveryAndLinkingService.discoverDemo(discoverRequestDTO);
		logger.info("Request Received For Discovery ends {}", ZonedDateTime.now());
		return CompletableFuture.completedFuture(ResponseEntity.accepted().build());
	}
}
